{"version":3,"sources":["lib/helper.js","CodePanel.js","BasicAttrEditor.js","ShapeItem.js","InputTextArea.js","SvgView.js","AddShape.js","App.js","serviceWorker.js","index.js"],"names":["start","shape","attributes","cx","cy","r","fill","x","y","width","height","map","el","id","defaultValues","circle","rect","polygon","points","attr2string","attrs","Object","entries","key","value","join","CodePanel","props","svg","svgAttrs","shapes","attrS","className","attrsData","viewBox","def","stroke","BasicAttrEditor","useState","controls","setControls","unUsedAttrs","keys","filter","every","control","addAttr","setAddAttr","element","onChange","e","console","log","target","onClick","newControls","changed","fromEntries","i","slice","style","length","ShapeItem","shapeUp","shapeDown","InputTextArea","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","SvgView","zoom","setZoom","setZoomHandler","type","checked","name","ShapeType","data-id","setSelectedShape","AddShape","newShape","setNewShape","addShape","App","useEffect","selectedShape","setShapes","setSvgAttrs","moveShape","step","movedShape","index","findIndex","sh","old","attr","Date","now","selected","changedShape","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b668a13b.chunk.js","sourcesContent":["export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map( (el,id)=>({...el,id }) );\nexport const defaultValues = {\n  circle: { cx:50,cy:30,r:10},\n  rect: {x:20,y:50,width:40,height:20},\n  polygon: {points:\"10 10 45 15 20 35\"}\n};\n","import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"code-panel\">\n      <h3 className=\"header\">Source code:</h3>\n      <pre className=\"code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\n\nconst attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\"\n  },\n  fill: {\n    def: \"pink\"\n  },\n  stroke: {\n    def: \"purple\"\n  }\n};\n\nconst BasicAttrEditor = props => {\n  const [controls, setControls] = useState(Object.entries(props.attrs));\n  const unUsedAttrs = Object.keys(attrsData).filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(props.element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper\">\n      <span>{props.element}</span>\n      <select\n        value={addAttr}\n        onChange={e => {\n          console.log(e.target.value);\n          setAddAttr(e.target.value);\n        }}\n      >\n        {unUsedAttrs.map(key => (\n          <option key={key}>{key}</option>\n        ))}\n      </select>\n\n      <button\n        onClick={() => {\n          console.log({ addAttr });\n          const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n          setControls(newControls);\n          setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n          props.changed(Object.fromEntries(newControls));\n        }}\n      >\n        +\n      </button>\n      {controls.map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            \n            <span className=\"key-name\">{key}</span>\n            <input\n              onChange={e => {\n                controls[i][1] = e.target.value;\n                setControls(controls.slice());\n                props.changed(Object.fromEntries(controls));\n            }}\n            style={{ width: (value+\"\").length / 2 + \"rem\" }}\n              value={value}\n            />\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BasicAttrEditor;\n","import React from 'react';\nimport BasicAttrEditor from './BasicAttrEditor.js';\nimport './ShapeItem.css';\n\nconst ShapeItem = (props) => {\n    const shape = props.shape;\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          changed={attrs => {\n            shape.attributes=attrs;\n            props.changed(shape);\n          }}\n        />\n        <div className=\"move-up-down-buttons\">\n            <button className=\"move-up-button\"\n              onClick={() => {\n                  props.shapeUp(shape);\n              }}>up</button>\n            <button className=\"move-down-button\" onClick={() => {\n                props.shapeDown(shape);\n              }}\n            >down</button>\n        </div>\n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n        <div className=\"flex-column  margined\">\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         const shapes=Array.from(svg.children).map(child=>{\n           const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n           return {id:id++,attributes:atts,shape:child.tagName}\n        })\n        props.change(shapes);\n      }\n      }>parse</button>\n        </div>\n    )\n}\n\nexport default InputTextArea;","import React,{useState} from 'react';\nimport './SvgView.css';\n\n\n\n\nconst SvgView = (props) => {\n    const [zoom,setZoom] = useState(400);\n\n    const setZoomHandler = zoom => () => setZoom(zoom);\n    return (\n        <div className=\"svg-display margined\">\n            <div className=\"svg-zoom-control flex-row\">\n                {/* <span className=\"header\">Zoom:</span> */}\n                <span >Zoom:</span>\n\n                <label>\n                  <input type=\"radio\" checked={zoom===100} onChange={setZoomHandler(100)} name=\"zoom-radios\" />\n                  100\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===200} onChange={setZoomHandler(200)} name=\"zoom-radios\" />\n                    200\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===400} onChange={setZoomHandler(400)} name=\"zoom-radios\" />\n                    400\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===800} onChange={setZoomHandler(800)} name=\"zoom-radios\" />\n                    800\n                </label>\n            </div>\n        <svg {...props.attrs} className=\"Svg-view\" style={{width:zoom}}>\n        {props.shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType data-id={shape.id} onClick={(e)=>{\n            props.setSelectedShape(shape.id)\n          }} key={i} {...shape.attributes} />;\n        })}\n      </svg>\n        </div>\n    )\n}\n\nexport default SvgView;\n","import React,{useState} from 'react';\nimport './AddShape.css';\n\nconst AddShape = (props) => {\n    const [newShape, setNewShape] = useState(\"circle\");\n    return (\n        <>\n         <select\n        value={newShape}\n        onChange={e => {\n          setNewShape(e.target.value);\n        }}\n      >\n        <option>circle</option>\n        <option>rect</option>\n        <option>polygon</option>\n      </select>\n      <button\n        onClick={() => {\n          props.addShape(newShape)\n        }}\n      >Add Shape</button>\n        </>\n    );\n}\n\nexport default AddShape;","import React, { useState, useEffect } from \"react\";\nimport { start, defaultValues } from \"./lib/helper.js\";\nimport \"./App.css\";\n\nimport CodePanel from \"./CodePanel.js\";\nimport BasicAttrEditor from \"./BasicAttrEditor.js\";\nimport ShapeItem from \"./ShapeItem\";\nimport InputTextArea from './InputTextArea';\nimport SvgView from './SvgView.js';\nimport AddShape from './AddShape.js';\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"RENDER\",{selectedShape});\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 720 720\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n\n  return (\n    <>\n    <header>\n      <h1>Svarog</h1>\n    </header>\n    <div className=\"flex-row\">\n\n      <SvgView shapes={shapes} attrs={svgAttrs} setSelectedShape={setSelectedShape}/>\n     <div className=\"flex-column flex-grow bordered margined\">\n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n      <InputTextArea change={setShapes} />\n     </div>\n    </div>\n    <div className=\"svg-data margined bordered\">\n\n      <BasicAttrEditor\n        element=\"svg\"\n        attrs={svgAttrs}\n        changed={attr => {\n          setSvgAttrs(attr);\n        }}\n        />\n    \n     <AddShape addShape={(shape)=>{\n       setShapes([...shapes,{shape,attributes:defaultValues[shape],id:Date.now()}])\n      }} />\n\n      <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n        }}>x</button>\n        <ShapeItem  shape={shape} selected={selectedShape===shape.id}\n        changed={(changedShape)=>{\n          shapes[shapes.findIndex((sh)=>sh===changedShape)]=changedShape;\n          setShapes(shapes.slice());\n        }}\n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n       </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}