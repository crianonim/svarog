{"version":3,"sources":["CodePanel.js","BasicAttrEditor.js","lib/helper.js","ShapeItem.js","InputTextArea.js","App.js","serviceWorker.js","index.js"],"names":["attr2string","attrs","Object","entries","map","key","value","join","CodePanel","props","svg","svgAttrs","shapes","shape","attrS","attributes","className","attrsData","viewBox","def","fill","stroke","BasicAttrEditor","useState","controls","setControls","unUsedAttrs","keys","filter","every","control","addAttr","setAddAttr","element","onChange","e","console","log","target","onClick","newControls","changed","fromEntries","i","slice","style","width","length","start","cx","cy","r","x","y","height","el","id","defaultValues","circle","rect","polygon","points","ShapeItem","shapeUp","shapeDown","InputTextArea","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","App","useEffect","selectedShape","setShapes","newShape","setNewShape","setSvgAttrs","setSelectedShape","moveShape","step","movedShape","index","findIndex","sh","old","ShapeType","data-id","Date","now","attr","selected","changedShape","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.803b80de.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"code-panel\">\n      <h3>Source code:</h3>\n      <pre className=\"code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\n\nconst attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\"\n  },\n  fill: {\n    def: \"pink\"\n  },\n  stroke: {\n    def: \"purple\"\n  }\n};\n\nconst BasicAttrEditor = props => {\n  const [controls, setControls] = useState(Object.entries(props.attrs));\n  const unUsedAttrs = Object.keys(attrsData).filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(props.element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper\">\n      <span>{props.element}</span>\n      <select\n        value={addAttr}\n        onChange={e => {\n          console.log(e.target.value);\n          setAddAttr(e.target.value);\n        }}\n      >\n        {unUsedAttrs.map(key => (\n          <option key={key}>{key}</option>\n        ))}\n      </select>\n\n      <button\n        onClick={() => {\n          console.log({ addAttr });\n          const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n          setControls(newControls);\n          setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n          props.changed(Object.fromEntries(newControls));\n        }}\n      >\n        +\n      </button>\n      {controls.map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            \n            <span className=\"key-name\">{key}</span>\n            <input\n              onChange={e => {\n                controls[i][1] = e.target.value;\n                setControls(controls.slice());\n                props.changed(Object.fromEntries(controls));\n            }}\n            style={{ width: (value+\"\").length / 2 + \"rem\" }}\n              value={value}\n            />\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BasicAttrEditor;\n","export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map( (el,id)=>({...el,id }) );\nexport const defaultValues = {\n  circle: { cx:50,cy:30,r:10},\n  rect: {x:20,y:50,width:40,height:20},\n  polygon: {points:\"10 10 45 15 20 35\"}\n};\n","import React from 'react';\nimport BasicAttrEditor from './BasicAttrEditor.js';\nimport './ShapeItem.css';\n\nconst ShapeItem = (props) => {\n    const shape = props.shape;\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          changed={attrs => {\n            shape.attributes=attrs;\n            props.changed(shape);\n          }}\n        />\n        <div className=\"move-up-down-buttons\">\n            <button className=\"move-up-button\"\n              onClick={() => {\n                  props.shapeUp(shape);\n              }}>up</button>\n            <button className=\"move-down-button\" onClick={() => {\n                props.shapeDown(shape);\n              }}\n            >down</button>\n        </div>\n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n        <>\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         const shapes=Array.from(svg.children).map(child=>{\n           const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n           return {id:id++,attributes:atts,shape:child.tagName}\n        })\n        props.change(shapes);\n      }\n      }>parse</button>\n        </>\n    )\n}\n\nexport default InputTextArea;","import React, { useState, useEffect } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport CodePanel from \"./CodePanel.js\";\nimport BasicAttrEditor from \"./BasicAttrEditor.js\";\nimport { start, defaultValues } from \"./lib/helper.js\";\nimport ShapeItem from \"./ShapeItem\";\nimport InputTextArea from './InputTextArea';\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"RENDER\",{selectedShape});\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [newShape, setNewShape] = useState(\"circle\");\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 720 720\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n\n  return (\n    <>\n      <svg {...svgAttrs} className=\"Svg-view\">\n        {shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType data-id={shape.id} onClick={(e)=>{\n            setSelectedShape(shape.id)\n          }} key={i} {...shape.attributes} />;\n        })}\n      </svg>\n      <select\n        value={newShape}\n        onChange={e => {\n          setNewShape(e.target.value);\n        }}\n      >\n        <option>circle</option>\n        <option>rect</option>\n        <option>polygon</option>\n      </select>\n      <button\n        onClick={() => {\n          console.log(newShape);\n          setShapes([\n            ...shapes,\n            {\n              shape: newShape,\n              attributes: defaultValues[newShape],\n              id: Date.now()\n            }\n          ]);\n        }}\n      >Add Shape</button>\n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n      <BasicAttrEditor\n        element=\"svg\"\n        attrs={svgAttrs}\n        changed={attr => {\n          setSvgAttrs(attr);\n        }}\n      />\n     <InputTextArea change={setShapes} />\n      <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n        }}>x</button>\n        <ShapeItem  shape={shape} selected={selectedShape===shape.id}\n        changed={(changedShape)=>{\n          shapes[shapes.findIndex((sh)=>sh===changedShape)]=changedShape;\n          setShapes(shapes.slice());\n        }}\n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}