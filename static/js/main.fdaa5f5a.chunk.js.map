{"version":3,"sources":["lib/helper.js","components/CodePanel.js","components/InputTextArea.js","components/Coords.js","components/SvgView.js","components/AddShape.js","components/Messages.js","components/BasicAttrEditor.js","components/CurrentShapePanel.js","components/AttrList.js","components/ShapeItem.js","components/ShapesList.js","components/SvgProperties.js","components/SaveLoadPanel.js","App.js","serviceWorker.js","index.js"],"names":["start","shape","attributes","cx","cy","r","fill","x","y","width","height","map","el","id","attrsData","viewBox","def","type","stroke","strokeWidth","points","d","x1","y1","x2","y2","defaultValues","circle","rect","polygon","path","line","probably","fraction","Math","random","rnd","max","createRandomShape","Object","keys","fromEntries","entries","entry","count","i","push","join","randomColorString","console","log","_","n","toString","attr2string","attrs","key","value","CodePanel","props","svg","svgAttrs","shapes","attrS","className","InputTextArea","onClick","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","msg","Coords","svgCanvas","zoom","useState","coords","setCoords","handler","e","offsetX","offsetY","useEffect","current","addEventListener","removeEventListener","SvgView","setZoom","useRef","setZoomHandler","ref","style","ShapeType","data-id","setSelectedShape","AddShape","newShape","setNewShape","onChange","target","shapeName","addShape","parseMessage","message","toLowerCase","substring","Messages","dismiss","removeAttributeFromShape","attributeName","filter","BasicAttrEditor","element","changed","controls","setControls","unUsedAttrs","attr","includes","every","control","addAttr","setAddAttr","newControls","slice","length","backgroundColor","changedAttrs","icon","faTrash","CurrentShapePanel","AttrList","ShapeItem","duplicate","shapeUp","shapeDown","title","faCopy","faArrowUp","faArrowDown","ShapesList","selectedShape","setShapes","moveShape","dup","assign","Date","now","index","findIndex","selected","SvgProperties","isSelected","SaveLoadPanel","setSaved","setMessage","setSvgAttrs","saved","localStorage","setItem","JSON","stringify","obj","parse","getItem","disabled","App","svgPropertiesSelected","setSvgPropertiesSelected","step","movedShape","sh","old","find","cSvg","createRandomSVG","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdaa5f5a.chunk.js","sourcesContent":["export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 275,\n      cy: 275,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map((el, id) => ({ ...el, id }));\n\nexport const attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\",\n    el: [\"svg\"]\n  },\n  fill: {\n    def: \"pink\",\n    type: \"color\"\n  },\n  stroke: {\n    def: \"purple\",\n    type: \"color\"\n  },\n  strokeWidth: {\n    def: \"1\"\n  },\n  cx: {\n    el: [\"circle\"],\n    def: 360\n  },\n  cy: {\n    el: [\"circle\"],\n    def: 360\n  },\n  r: {\n    el: [\"circle\"],\n    def: 12\n  },\n  width: {\n    el: [\"rect\"],\n    def: 100,\n  },\n  height: {\n    el: [\"rect\"],\n    def: 100,\n\n  },\n  x: {\n    el: [\"rect\"],\n    def: 100,\n\n  },\n  y: {\n    el: [\"rect\"],\n    def: 100,\n\n  },\n  points: {\n    el: [\"polygon\"],\n    def: \"10 40 50 90\"\n  },\n  d: {\n    el: [\"path\"],\n    def: \"M 10 10\"\n  },\n  x1: {\n    el: [\"line\"],\n    def: \"10\"\n  },\n  y1: {\n    el: [\"line\"],\n    def: \"20\"\n  },\n  x2: {\n    el: [\"line\"],\n    def: \"30\"\n  },\n  y2: {\n    el: [\"line\"],\n    def: \"40\"\n  },\n};\n\n\n\nexport const colours = [\"brown\", \"black\", \"red\", \"blue\", \"green\", \"yellow\", \"pink\", \"purple\", 'teal', 'orange', 'wheat', 'coral', 'crimson']\n\nexport const defaultValues = {\n  circle: { cx: 50, cy: 30, r: 10 },\n  rect: { x: 20, y: 50, width: 40, height: 20 },\n  polygon: { points: \"10 10 45 15 20 35\" },\n  path: { d: \"M 10 10 C 200 200, 400 20, 50 10\" },\n  line: { x1: 10, y1: 20, x2: 120, y2: 230, stroke: \"black\" }\n};\n\nexport const probably = (fraction) => Math.random() < fraction;\nexport const rnd = (max) => (Math.random() * max) >> 0;\n\n\nexport const createRandomShape = () => {\n  const shapes = Object.keys(defaultValues);\n  // const type=shapes[rnd(shapes.length)]\n  const type = shapes[rnd(3)]\n  const shape = { shape: type };\n  if (type === 'circle' || type === 'rect') {\n    shape.attributes = Object.fromEntries(Object.entries(defaultValues[type]).map(entry => {\n      entry[1] = rnd((entry[0] === \"r\" || entry[0] === \"width\" || entry[0] === \"height\") ? 540 : 720);\n      return entry\n    }));\n\n  } else if (type === 'polygon') {\n    const points = [];\n    const count = rnd(8) + 4;\n    for (let i = 0; i < count; i++) {\n      points.push(rnd(400));\n      points.push(rnd(400));\n\n    }\n    shape.attributes = { points: points.join(' ') }\n  }\n  if (probably(0.5)) {\n    shape.attributes.strokeWidth = rnd(10) + 1;\n  }\n  if (probably(0.7)) {\n    // shape.attributes.fill=colours[rnd(colours.length)];\n    shape.attributes.fill = randomColorString();\n\n  }\n  if (probably(0.4)) {\n    // shape.attributes.stroke=colours[rnd(colours.length)];\n    shape.attributes.stroke = randomColorString();\n\n  }\n  console.log(type, shape)\n  return shape;\n\n}\nexport const randomColorString = () => \"#\" + [0, 0, 0].map(_ => rnd(256)).map(n => n.toString(16)).join('');\n\nexport const createRandomSVG = () => {\n  const shapes = [];\n  const attributes = { viewBox: \"0 0 400 400\" }\n  const svg = { attributes, shapes }\n  const count = rnd(6) + 3;\n  for (let i = 0; i < count; i++) {\n    shapes.push({ ...createRandomShape(), id: Date.now() + \"\" + i });\n  }\n  console.log(count);\n  return svg\n}\n","import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"panel\">\n      <div className=\"panel-heading\">Source code:</div>\n      <pre className=\"panel-block code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n      <div className=\"panel\">\n        <div className=\"panel-heading\">Parse your SVG code</div>\n         <div className=\"panel-block\">  \n        <div className=\"flex-column  margined\">\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button className=\"button is-small is-info\" onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         if (svg) {\n           const shapes=Array.from(svg.children).map(child=>{\n             const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n             return {id:id++,attributes:atts,shape:child.tagName}\n            })\n            props.change(shapes);\n          } else {\n            props.msg(\"E#Badly formed SVG.\")\n          }\n      }\n      }>Parse</button>\n        </div>\n        </div>\n      \n      </div>      \n    )\n}\n\nexport default InputTextArea;","import React,{useEffect,useState} from \"react\";\n\nconst Coords = ({svgCanvas,zoom}) => {\n    const [coords,setCoords]=useState([0,0])\n    const handler=(e)=>{\n        setCoords([e.offsetX,e.offsetY].map(x=>x/zoom))\n        \n    }\n    useEffect(()=>{\n        if (svgCanvas.current===null){\n            return\n        }\n        svgCanvas.current.addEventListener(\"mousemove\",handler)\n        return ()=>{\n            svgCanvas.current.removeEventListener(\"mousemove\",handler)\n        }\n    },[svgCanvas,zoom])\n    return (\n        <span className=\"align-self-center\">X:{coords[0]} Y:{coords[1]} &nbsp;</span>\n    )\n    \n}\nexport default Coords","import React,{useState,useRef} from 'react';\nimport Coords from './Coords';\nimport './SvgView.css';\n\n\n\n\nconst SvgView = (props) => {\n    const [zoom,setZoom] = useState(400);\n    const svgCanvas=useRef(null)\n    const setZoomHandler = zoom => () => setZoom(zoom);\n    return (\n        <div className=\"panel\">\n          <div className=\"panel-heading\">Your SVG</div>\n          <p className=\"panel-tabs\">\n            <Coords svgCanvas={svgCanvas} zoom={zoom/400}/>\n            <span className=\"align-self-center\">Zoom:</span>\n            <a onClick={setZoomHandler(100)} className={zoom===100?\"is-active\":\"\"}>100px</a>\n            <a onClick={setZoomHandler(200)} className={zoom===200?\"is-active\":\"\"}>200px</a>\n            <a onClick={setZoomHandler(400)} className={zoom===400?\"is-active\":\"\"}>400px</a>\n            {/* <a onClick={setZoomHandler(800)}>800px</a> */}\n          </p>\n         <div className=\"panel-block\">\n           <div className=\"svg-wrapper\">\n\n           <svg ref={svgCanvas} {...props.attrs} className=\"Svg-view\" onClick={console.log} style={{width:zoom,height:zoom}}>\n          {props.shapes.map((shape, i) => {\n            const ShapeType = shape.shape;\n            return <ShapeType data-id={shape.id} onClick={(e)=>{\n              props.setSelectedShape(shape.id)\n            }} key={i} {...shape.attributes} />;\n          })}\n           </svg>\n          </div>\n         </div>\n        </div>\n    )\n}\n\nexport default SvgView;\n","import React, { useState } from \"react\";\nimport \"./AddShape.css\";\nimport { defaultValues } from \"../lib/helper.js\";\n\nconst AddShape = props => {\n  const [newShape, setNewShape] = useState(\"circle\");\n  return (\n    <span className=\"field has-addons has-hmargin-med \">\n      <span className=\"control\">\n        <span className=\"select is-small\">\n\n        <select\n          value={newShape}\n          onChange={e => {\n            setNewShape(e.target.value);\n          }}\n          >\n          {Object.keys(defaultValues).map(shapeName => (\n            <option key={shapeName}>{shapeName}</option>\n            ))}\n        </select>\n            </span>\n      </span>\n      <span className=\"control\">\n        <button\n          className=\"button  is-small is-primary\"\n          onClick={() => {\n            props.addShape(newShape);\n          }}\n        >\n          Add Shape\n        </button>\n      </span>\n    </span>\n  );\n};\n\nexport default AddShape;\n","import React from 'react';\nimport './Messages.css';\n\nconst Messages = (props)=>{\n    const [type,msg] = parseMessage(props.message);\n    return (\n    <div className={\" has-vmargin-med \"+ (msg!==\"\" ?\"\":\"invisible\")}  onClick={props.dismiss}>\n     <p className={\"message message-type-\"+type}>{msg}</p>    \n    </div>\n    );\n}\nconst parseMessage = message => {\n    if (!message) return [\"\",\"\"];\n\n    // if (!message) return [\"\",\"Empty\"];\n    let type=\"i\";\n    let msg=message;\n    if (message[1]===\"#\"){\n        type=message[0].toLowerCase();\n        msg=message.substring(2);\n    }\n    return [type,msg]\n}\nexport default Messages","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\nimport {attrsData} from '../lib/helper.js';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\n\nconst BasicAttrEditor = ({attrs,element,changed}) => {\n  const [controls, setControls] = useState(Object.entries(attrs));\n  const validAttrs = Object.entries(attrsData)\n   .filter( ([_,attr])=>!attr.el || attr.el.includes(element))\n   .map(([key,_])=>key);\n  const unUsedAttrs = validAttrs.filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap  block\">\n      <span>Add property: &nbsp;</span>\n      <span className=\"field has-addons\">\n       <span className=\"control\">\n         <span className=\"select   is-small\">\n           <select\n            value={addAttr}\n            onChange={e => {\n              console.log(\"BAE\",e.target.value);\n              setAddAttr(e.target.value);\n            }}>\n            {unUsedAttrs.map(key => (\n              <option key={key}>{key}</option>\n              ))}\n          </select>\n         </span>\n       </span>\n      \n      <span className=\"control\">\n        <button className=\"button is-small is-primary\"\n          onClick={() => {\n            console.log({ addAttr });\n            const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n            setControls(newControls);\n            setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n            changed(Object.fromEntries(newControls));\n          }}\n          >+</button>\n        </span>\n      </span>\n      {Object.entries(attrs).map(([key, value], i) => {\n        return (\n          <span key={key} className=\"flex-row has-hmargin-med\">\n            <span className=\"key-name\">{key}:  </span>\n            <span className=\"field has-addons\">\n             <span className=\"control\">\n              <input className=\"input is-small    \"\n                onChange={e => {\n                  controls[i][1] = e.target.value;\n                  setControls(controls.slice());\n                  console.log(\"NV\",{controls})\n                  changed(Object.fromEntries(controls));\n                }}\n                style={{ width: ((value+\"\").length+1) + \"rem\" }}\n                value={value}\n                />\n              {attrsData[key].type===\"color\"?(<div className=\"color-box\" style={{backgroundColor:value}}></div>):null}\n              </span>\n \n             <span className=\"control\">\n              <button className=\"button is-small is-danger\" onClick={()=>{\n                const changedAttrs=removeAttributeFromShape(controls,key)\n                changed(Object.fromEntries(changedAttrs))\n                setControls(changedAttrs);\n              }\n              }><FontAwesomeIcon icon={faTrash}/></button>\n            </span>\n           </span>\n          </span>\n\n        );\n      })}\n    </div>\n  );\n};\n\nconst removeAttributeFromShape=(attributes,attributeName)=>{\n  return attributes.filter( ([key,_])=>key!==attributeName );\n}\n\nexport default BasicAttrEditor;\n","import React from 'react';\nimport BasicAttrEditor from './BasicAttrEditor';\n\nconst CurrentShapePanel = ({shape,changed})=>{\n    return (\n        <div className=\"panel\">\n          <div className=\"panel-heading\">Edit properties of the selected <b>{shape.shape}</b></div>\n        <div className=\"panel-block\">\n\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          changed={attrs => {\n            shape.attributes=attrs;\n            changed(shape);\n          }}\n          />\n          </div>\n        </div>\n    )\n}\n\nexport default CurrentShapePanel;\n","import React from \"react\";\n\nconst AttrList = ({element,attrs}) => {\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper block\">\n      <span>{element}</span>\n      \n      {Object.entries(attrs).map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            <span className=\"key-name\">{key}</span>\n            <span className=\"\">{value}</span>\n          </span>\n\n        );\n      })}\n    </div>\n  );\n};\n\n\nexport default AttrList;\n","import React from 'react';\nimport './ShapeItem.css';\nimport AttrList from './AttrList.js';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faCopy,faArrowDown,faArrowUp } from '@fortawesome/free-solid-svg-icons'\nconst ShapeItem = ({shape,duplicate,shapeUp,shapeDown,setSelectedShape}) => {\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <div className=\"move-up-down-buttons\">\n          <button onClick={()=>{\n            duplicate(shape);\n          }} className=\"button is-small is-primary\"\n          title=\"Duplicate Shape\"\n          >\n            <FontAwesomeIcon icon={faCopy}/>\n          </button>\n            <button title=\"Move Up\"  className=\"move-up-button button is-small is-info\"\n              onClick={() => {\n                  shapeUp(shape);\n              }}><FontAwesomeIcon icon={faArrowUp}/></button>\n            <button title=\"Move Down\" className=\"move-down-button  button is-small is-info\" onClick={() => {\n                shapeDown(shape);\n              }}\n            ><FontAwesomeIcon icon={faArrowDown}/></button>\n           \n        </div>\n        <span onClick={()=>{setSelectedShape(shape.id)}}>\n\n        <AttrList \n          element={shape.shape}\n          attrs={shape.attributes}\n          />\n        </span>\n       \n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from 'react';\nimport ShapeItem from './ShapeItem';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nconst ShapesList = ({shapes,selectedShape,setShapes,setSelectedShape,moveShape}) => {\n    return (<>\n     <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button className=\"button is-small is-danger \" title=\"Delete Shape\" onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n          setSelectedShape(null)\n        }}><FontAwesomeIcon icon={faTrash}/></button>\n        <ShapeItem setSelectedShape={setSelectedShape} shape={shape} duplicate={(shape)=>{\n          const dup=Object.assign({},shape);\n          dup.id=Date.now();\n          let index=shapes.findIndex(el=>el===shape);\n          setShapes([...shapes.slice(0,index+1),dup,...shapes.slice(index+1)]);\n        }} selected={selectedShape===shape.id}\n        \n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n       </div>\n    \n    </>)\n}\n\nexport default ShapesList;","import React from \"react\"\nimport AttrList from \"./AttrList\";\n\nconst SvgProperties = ({attrs,isSelected}) => {\n    return (\n        <div className={isSelected?'selected-shape':''}>\n        <AttrList element=\"svg\" attrs={attrs}/>\n        </div>\n    )\n}\nexport default SvgProperties","import React from 'react';\n\nconst SaveLoadPanel=({setSaved,setMessage,setShapes,setSvgAttrs,saved,shapes,svgAttrs})=>(\n    <div className=\"panel\">\n        <div className=\"panel-heading\">Save & Load to localStorage</div>\n        <div className=\"panel-block\">\n\n            <button className=\"button is-danger has-hmargin-med\" onClick={ ()=>{\n                localStorage.setItem(\"save\",JSON.stringify({attributes:svgAttrs,shapes}));\n                setSaved(true);\n                setMessage(\"SVG shape saved.\");\n            }}>Save</button>\n            <button className=\"button is-info has-hmargin-med\" onClick={()=>{\n                const obj=JSON.parse(localStorage.getItem(\"save\"));\n                if (obj){\n                    setShapes(obj.shapes);\n                    setSvgAttrs(obj.attributes);\n                    setMessage(\"SVG shape loaded.\")\n                }\n            }} disabled={!saved} >Load</button>\n        </div>\n</div>)\n\nexport default SaveLoadPanel\n","import React, { useState} from \"react\";\nimport { start, defaultValues, createRandomSVG } from \"./lib/helper.js\";\nimport \"./App.css\";\nimport \"../node_modules/bulma/css/bulma.min.css\"\nimport CodePanel from \"./components/CodePanel.js\";\nimport InputTextArea from './components/InputTextArea';\nimport SvgView from './components/SvgView.js';\nimport AddShape from './components/AddShape.js';\nimport Messages from './components/Messages.js';\nimport CurrentShapePanel from './components/CurrentShapePanel.js';\nimport ShapesList from \"./components/ShapesList.js\";\nimport SvgProperties from \"./components/SvgProperties.js\";\nimport SaveLoadPanel from \"./components/SaveLoadPanel.js\";\n\nconst App = () => {\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 400 400\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n  const [saved,setSaved] = useState(localStorage.getItem('save'));\n  const [message,setMessage] = useState(null)\n  const [svgPropertiesSelected,setSvgPropertiesSelected]=useState(true);\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n  return (\n    <div className=\"container\">\n    <header className=\"hero\">\n      <h1 className=\"title\"><span className=\"title-letters\">Sv</span>aro<span className=\"title-letters\" >g</span></h1>\n      <h2 className=\"subtitle\">A slavic deity of celestial fire and blacksmithing that will help you create SVGs.</h2>\n    </header>\n   \n    <Messages  message={message} dismiss={()=>setMessage(null)}/>    \n   \n    <main className=\"block flex-wrap flex-row \">\n      <SvgView shapes={shapes} attrs={svgAttrs} setSelectedShape={(shape)=>{setSelectedShape(shape);setSvgPropertiesSelected(false)}} />\n        \n\n      <div className=\"panel\">\n       <div className=\"panel-heading\">Select element to edit</div>\n       <div className=\"panel-block\">\n        <div>\n         <span onClick={()=>{setSelectedShape(null);setSvgPropertiesSelected(true)}}>\n          <SvgProperties isSelected={svgPropertiesSelected} attrs={svgAttrs} changed={attr => {\n          setSvgAttrs(attr);\n          }}/>\n         </span>\n         <ShapesList shapes={shapes} setSelectedShape={(shape)=>{setSelectedShape(shape);setSvgPropertiesSelected(false)}} selectedShape={selectedShape} setShapes={setShapes} moveShape={moveShape}/>\n        </div>\n       </div>\n      </div>\n\n      \n      {selectedShape!==null && \n      <CurrentShapePanel key={selectedShape} shape={shapes.find(el=>el.id===selectedShape)} changed={(shape)=>{shapes[shapes.findIndex(el=>el.id===selectedShape)]=shape;setShapes([...shapes])}}/>\n      }\n       {svgPropertiesSelected && \n      <CurrentShapePanel shape={ {shape:'svg',attributes:svgAttrs} } changed={(svg)=>{setSvgAttrs(svg.attributes)}}/>\n      }\n\n      <div className=\"panel\">\n      <div className=\"panel-heading\">Transform SVG</div>\n        <div className=\"panel-block\">\n          <div className=\"flex-row\">\n           <button className=\"button is-small is-warning has-hmargin-med\" onClick={()=>{\n             setSelectedShape(null);\n            const cSvg=createRandomSVG();\n            setShapes(cSvg.shapes);\n            setSvgAttrs(cSvg.attributes);\n            setMessage(\"Random svg created.\")\n          }}>Randomise</button>\n           <button className=\"button is-small is-danger has-hmargin-med\" onClick={()=>{setShapes([]);setSvgPropertiesSelected(true);setSelectedShape(null)}}>Clear</button>\n           <AddShape addShape={(shape)=>{\n          setShapes([...shapes,{shape,attributes:defaultValues[shape],id:Date.now()}])\n        }} />    \n         </div>\n        </div>\n      </div>\n         \n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n\n      <InputTextArea msg={setMessage} change={setShapes} />\n\n      <SaveLoadPanel saved={saved} setSaved={setSaved} setMessage={setMessage} setShapes={setShapes} setSvgAttrs={setSvgAttrs} shapes={shapes} svgAttrs={svgAttrs}/>\n     \n     </main>\n\n    </div>\n   \n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}