{"version":3,"sources":["CodePanel.js","App.js","serviceWorker.js","index.js"],"names":["attr2string","attrs","Object","entries","map","key","value","join","CodePanel","props","svg","svgAttrs","shapes","shape","attrS","attributes","className","start","cx","cy","r","fill","x","y","width","height","defaultValues","circle","rect","polygon","App","updateShapes","setShapes","shapesControlls","i","JSON","parse","useEffect","console","log","useState","isUpdate","setIsUpdate","newShape","setNewShape","viewBox","el","stringify","setShapesControlls","ShapeType","onClick","onChange","e","target","control","ind","time","c","timeEnd","old","slice","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.672df935.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"code-panel\">\n      <h3>Source code:</h3>\n      <pre className=\"code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState, useEffect } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport CodePanel from \"./CodePanel.js\";\n\nconst start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n];\nconst defaultValues = {\n  circle: '{\"cx\":50,\"cy\":30,\"r\":10}',\n  rect: '{\"x\":20,\"y\":50,\"width\":40,\"height\":20}',\n  polygon: '{\"points\":\"10 10 45 15 20 35\"}'\n};\n\nconst App = () => {\n  const updateShapes = () => {\n    setShapes(\n      shapesControlls.map(i => ({\n        shape: i.shape,\n        attributes: JSON.parse(i.attributes)\n      }))\n    );\n  };\n  useEffect( ()=>{\n    console.log(\"RENDER\");\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n  \n  // const [inputs,setInputs] = useState(circles.map(c=>JSON.stringify(c)));\n  const [shapes, setShapes] = useState(start);\n  const [isUpdate, setIsUpdate] = useState(false);\n  const [newShape, setNewShape] = useState(\"circle\");\n  const [svgAttrs,setSvgAttrs] = useState({viewBox:\"0 0 720 720\"});\n  const [shapesControlls, setShapesControlls] = useState(\n    start.map(el => ({\n      shape: el.shape,\n      attributes: JSON.stringify(el.attributes)\n    }))\n  );\n  useEffect(() => {\n    if (isUpdate) {\n      updateShapes();\n    }\n    setIsUpdate(false);\n    \n  });\n  return (\n    <>\n      <svg {...svgAttrs} className=\"Svg-view\">\n        {shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType key={i} {...shape.attributes} />;\n        })}\n      </svg>\n      {/* <button onClick={()=>setInputs([...inputs,JSON.stringify({cx:Math.random()*720,cy:Math.random()*720,r:20+Math.random()*50})])}>Add</button> */}\n      <button onClick={updateShapes}>Update</button>\n      <select\n        value={newShape}\n        onChange={e => {\n          setNewShape(e.target.value);\n        }}\n      >\n        <option>circle</option>\n        <option>rect</option>\n        <option>polygon</option>\n      </select>\n      <button\n        onClick={() => {\n          console.log(newShape);\n          setShapesControlls([\n            ...shapesControlls,\n            { shape: newShape, attributes: defaultValues[newShape] }\n          ]);\n          updateShapes();\n        }}\n      >\n        Add Shape\n      </button>\n      <CodePanel shapes={ shapes} svgAttrs={svgAttrs}  />\n\n      <div>\n        {shapesControlls.map((control, ind) => (\n          <div className=\"shape-row\" key={ind}>\n            <span className=\"shape-type\">{control.shape}</span>\n            <input\n              className=\"shape-attributes\"\n              value={control.attributes}\n              onChange={e => {\n                console.time(\"map\");\n                setShapesControlls(\n                  shapesControlls.map((c, i) =>\n                    ind === i\n                      ? { attributes: e.target.value, shape: c.shape }\n                      : c\n                  )\n                );\n                console.timeEnd(\"map\");\n                try {\n                  JSON.parse(e.target.value);\n                  setIsUpdate(true);\n                } catch (e) {\n                  setIsUpdate(false);\n                }\n              }}\n            />\n            {ind > 0 ? (\n              <button\n                onClick={() => {\n                  let old = shapesControlls[ind - 1];\n                  shapesControlls[ind - 1] = shapesControlls[ind];\n                  shapesControlls[ind] = old;\n                  setShapesControlls(shapesControlls.slice());\n                  updateShapes();\n                }}\n              >\n                up\n              </button>\n            ) : null}\n            {ind < shapesControlls.length - 1 ? (\n              <button\n                onClick={() => {\n                  let old = shapesControlls[ind + 1];\n                  shapesControlls[ind + 1] = shapesControlls[ind];\n                  shapesControlls[ind] = old;\n                  setShapesControlls(shapesControlls.slice());\n                  updateShapes();\n                }}\n              >\n                down\n              </button>\n            ) : null}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"interface\" />\n      <p>Jan</p>\n    </>\n  );\n};\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}