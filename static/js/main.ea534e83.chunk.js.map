{"version":3,"sources":["lib/helper.js","CodePanel.js","BasicAttrEditor.js","ShapeItem.js","InputTextArea.js","SvgView.js","AddShape.js","Messages.js","App.js","serviceWorker.js","index.js"],"names":["start","shape","attributes","cx","cy","r","fill","x","y","width","height","map","el","id","attrsData","viewBox","def","type","stroke","strokeWidth","points","d","colours","defaultValues","circle","rect","polygon","path","probably","fraction","Math","random","rnd","max","createRandomShape","Object","keys","fromEntries","entries","entry","count","i","push","join","length","console","log","attr2string","attrs","key","value","CodePanel","props","svg","svgAttrs","shapes","attrS","className","removeAttributeFromShape","attributeName","filter","BasicAttrEditor","useState","controls","setControls","unUsedAttrs","attr","includes","element","every","control","addAttr","setAddAttr","edited","onChange","e","target","onClick","newControls","changed","slice","style","color","changedAttrs","ShapeItem","setEdited","duplicate","title","shapeUp","shapeDown","InputTextArea","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","msg","SvgView","zoom","setZoom","setZoomHandler","checked","name","ShapeType","data-id","setSelectedShape","AddShape","newShape","setNewShape","shapeName","addShape","parseMessage","message","toLowerCase","substring","Messages","dismiss","App","useEffect","selectedShape","setShapes","setSvgAttrs","localStorage","getItem","saved","setSaved","setMessage","moveShape","step","movedShape","index","findIndex","sh","old","setItem","JSON","stringify","obj","parse","disabled","cSvg","Date","now","createRandomSVG","dup","assign","selected","changedShape","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea534e83.chunk.js","sourcesContent":["export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map( (el,id)=>({...el,id }) );\n\nexport const attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\",\n    el:[\"svg\"]\n  },\n  fill: {\n    def: \"pink\",\n    type: \"color\"\n  },\n  stroke: {\n    def: \"purple\",\n    type: \"color\"\n  },\n  strokeWidth:{\n    def:\"1\"\n  },\n  cx:{\n    el:[\"circle\"],\n    def:360\n  },\n  cy:{\n    el:[\"circle\"],\n    def:360\n  },\n  r:{\n    el:[\"circle\"],\n    def:12\n  },\n  width:{\n    el:[\"rect\"],\n    def:100,\n  },\n  height:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  x:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  y:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  points:{\n    el:[\"polygon\"],\n    def:\"10 40 50 90\"\n  },\n  d:{\n    el:[\"path\"],\n    def:\"M 10 10\"\n  }\n};\n\n\n\nexport const colours = [\"brown\",\"black\",\"red\",\"blue\",\"green\",\"yellow\",\"pink\",\"purple\",'teal','orange','wheat','coral','crimson']\n\nexport const defaultValues = {\n  circle: { cx:50,cy:30,r:10},\n  rect: {x:20,y:50,width:40,height:20},\n  polygon: {points:\"10 10 45 15 20 35\"},\n  path: {d:\"M 10 10 C 200 200, 400 20, 50 10\"}\n};\n\nexport const probably = (fraction) => Math.random() < fraction;\nexport const rnd = (max) => (Math.random()*max)>>0;\n\n\nexport const createRandomShape=()=>{\n  const shapes=Object.keys(defaultValues);\n  // const type=shapes[rnd(shapes.length)]\n  const type=shapes[rnd(3)]\n  const shape={shape:type};\n  if (type==='circle'||type==='rect'){\n    shape.attributes=Object.fromEntries( Object.entries( defaultValues[type]).map(entry=>{\n      entry[1]=rnd( (entry[0]===\"r\"||entry[0]===\"width\"||entry[0]===\"height\")?540:720);\n      return entry\n    }) );\n    \n  } else if (type==='polygon'){\n    const points=[];\n    const count=rnd(8)+4;\n    for (let i=0;i<count;i++){\n      points.push(rnd(720));\n      points.push(rnd(720));\n\n    }\n    shape.attributes={points:points.join(' ')}\n  }\n  if (probably(0.5)){\n    shape.attributes.strokeWidth=rnd(10)+1;\n  }\n  if (probably(0.7)){\n    shape.attributes.fill=colours[rnd(colours.length)];\n  }\n  if (probably(0.4)){\n    shape.attributes.stroke=colours[rnd(colours.length)];\n  }\n  console.log(type,shape)\n  return shape;\n\n}\n\nexport const createRandomSVG = ()=>{\n  const shapes =[];\n  const attributes = {viewBox:\"0 0 720 720\"}\n  const svg = {attributes,shapes}\n  const count = rnd(6)+3;\n  for (let i=0;i<count;i++){\n    shapes.push({...createRandomShape(),id:Date.now()+\"\"+i});\n  }\n  console.log(count);\n  return svg\n}\n","import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"code-panel\">\n      <h3 className=\"header\">Source code:</h3>\n      <pre className=\"code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\nimport {attrsData} from './lib/helper.js';\n\n\n\nconst BasicAttrEditor = props => {\n  const [controls, setControls] = useState(Object.entries(props.attrs));\n  const validAttrs = Object.entries(attrsData)\n   .filter( ([_,attr])=>!attr.el || attr.el.includes(props.element))\n   .map(([key,_])=>key);\n  const unUsedAttrs = validAttrs.filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(props.element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper\">\n      <span>{props.element}</span>\n      {props.edited?\n      <>\n      <select\n      value={addAttr}\n      onChange={e => {\n        console.log(e.target.value);\n        setAddAttr(e.target.value);\n      }}\n      >\n        {unUsedAttrs.map(key => (\n          <option key={key}>{key}</option>\n          ))}\n      </select>\n      \n\n      <button\n        onClick={() => {\n          console.log({ addAttr });\n          const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n          setControls(newControls);\n          setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n          props.changed(Object.fromEntries(newControls));\n        }}\n      >\n        +\n      </button>\n      </>\n      :null}\n      {controls.map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            \n            <span className=\"key-name\">{key}</span>\n            <input \n              onChange={e => {\n                controls[i][1] = e.target.value;\n                setControls(controls.slice());\n                props.changed(Object.fromEntries(controls));\n            }}\n            style={{ width: (value+\"\").length / 2 + \"rem\" }}\n              value={value}\n            />\n            {attrsData[key].type===\"color\"?(<span className=\"color-box\" style={{color:value}}>&#x2588;</span>):null}\n            {props.edited?(<button onClick={()=>{\n              const changedAttrs=removeAttributeFromShape(controls,key)\n              props.changed(Object.fromEntries(changedAttrs))\n              setControls(changedAttrs);\n              }\n            }>x</button>):null}\n          </span>\n\n        );\n      })}\n    </div>\n  );\n};\n\nconst removeAttributeFromShape=(attributes,attributeName)=>{\n  return attributes.filter( ([key,_])=>key!==attributeName );\n}\n\nexport default BasicAttrEditor;\n","import React,{useState} from 'react';\nimport BasicAttrEditor from './BasicAttrEditor.js';\nimport './ShapeItem.css';\n\nconst ShapeItem = (props) => {\n    const shape = props.shape;\n    const [edited,setEdited] = useState(false);\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <div className=\"move-up-down-buttons\">\n          <button onClick={()=>{\n            props.duplicate(shape);\n          }} className=\"dup-shape-button\"\n          title=\"Duplicate Shape\"\n          >\n            *\n          </button>\n            <button title=\"Move Up\"  className=\"move-up-button\"\n              onClick={() => {\n                  props.shapeUp(shape);\n              }}>&#x21E7;</button>\n            <button title=\"Move Down\" className=\"move-down-button\" onClick={() => {\n                props.shapeDown(shape);\n              }}\n            >&#x21E9;</button>\n            {edited?\n            <button title=\"Disable attribute editing\" className=\"edit-enable-btn\" onClick={()=>setEdited(false)}>--</button>:\n            <button title=\"Enable attribute editing\" className=\"edit-enable-btn\" onClick={()=>setEdited(true)}>...</button>\n          }\n        </div>\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          edited={edited}\n          changed={attrs => {\n            shape.attributes=attrs;\n            props.changed(shape);\n          }}\n        />\n       \n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n        <div className=\"flex-column  margined\">\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         if (svg) {\n           const shapes=Array.from(svg.children).map(child=>{\n             const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n             return {id:id++,attributes:atts,shape:child.tagName}\n            })\n            props.change(shapes);\n          } else {\n            props.msg(\"E#Badly formed SVG.\")\n          }\n      }\n      }>parse</button>\n      \n        </div>\n    )\n}\n\nexport default InputTextArea;","import React,{useState} from 'react';\nimport './SvgView.css';\n\n\n\n\nconst SvgView = (props) => {\n    const [zoom,setZoom] = useState(400);\n\n    const setZoomHandler = zoom => () => setZoom(zoom);\n    return (\n        <div className=\"svg-display margined\">\n            <div className=\"svg-zoom-control flex-row flex-align-center\">\n               \n                <span >Zoom:</span>\n\n                <label>\n                  <input type=\"radio\" checked={zoom===100} onChange={setZoomHandler(100)} name=\"zoom-radios\" />\n                  100\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===200} onChange={setZoomHandler(200)} name=\"zoom-radios\" />\n                    200\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===400} onChange={setZoomHandler(400)} name=\"zoom-radios\" />\n                    400\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===800} onChange={setZoomHandler(800)} name=\"zoom-radios\" />\n                    800\n                </label>\n            </div>\n        <svg {...props.attrs} className=\"Svg-view\" style={{width:zoom}}>\n        {props.shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType data-id={shape.id} onClick={(e)=>{\n            props.setSelectedShape(shape.id)\n          }} key={i} {...shape.attributes} />;\n        })}\n      </svg>\n        </div>\n    )\n}\n\nexport default SvgView;\n","import React,{useState} from 'react';\nimport './AddShape.css';\nimport {defaultValues} from './lib/helper.js'\n\nconst AddShape = (props) => {\n    const [newShape, setNewShape] = useState(\"circle\");\n    return (\n        <>\n         <select\n          value={newShape}\n          onChange={e => {\n           setNewShape(e.target.value);\n          }}\n         >{\n          Object.keys(defaultValues).map(shapeName=>(<option key={shapeName}>{shapeName}</option>))\n         }\n         </select>\n      <button\n        onClick={() => {\n          props.addShape(newShape)\n        }}\n      >Add Shape</button>\n        </>\n    );\n}\n\nexport default AddShape;","import React, {useState} from 'react';\nimport './Messages.css';\n\nconst Messages = (props)=>{\n    const [type,msg] = parseMessage(props.message);\n    return (\n    <div className={\"bordered margined \"+ (props.message ?\"\":\"invisible\")}  onClick={props.dismiss}>\n     <p className={\"message message-type-\"+type}>{msg}</p>    \n    </div>\n    );\n}\nconst parseMessage = message => {\n    if (!message) return [\"\",\"Empty\"];\n    let type=\"i\";\n    let msg=message;\n    if (message[1]===\"#\"){\n        type=message[0].toLowerCase();\n        msg=message.substring(2);\n    }\n    return [type,msg]\n}\nexport default Messages","import React, { useState, useEffect } from \"react\";\nimport { start, defaultValues, createRandomSVG } from \"./lib/helper.js\";\nimport \"./App.css\";\n\nimport CodePanel from \"./CodePanel.js\";\nimport BasicAttrEditor from \"./BasicAttrEditor.js\";\nimport ShapeItem from \"./ShapeItem\";\nimport InputTextArea from './InputTextArea';\nimport SvgView from './SvgView.js';\nimport AddShape from './AddShape.js';\nimport Messages from './Messages.js';\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"RENDER\",{selectedShape});\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 720 720\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n  const [saved,setSaved] = useState(localStorage.getItem('save'));\n  const [message,setMessage] = useState(null)\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n  return (\n    <>\n    <header>\n      <h1><span className=\"title-letters\">Sv</span>aro<span className=\"title-letters\" >g</span></h1>\n      <h2>A slavic deity of celestial fire and blacksmithing that will help you create SVGs.</h2>\n    </header>\n    <Messages  message={message} dismiss={()=>setMessage(null)}/>    \n    <div className=\"flex-row\">\n\n      <SvgView shapes={shapes} attrs={svgAttrs} setSelectedShape={setSelectedShape} />\n     <div className=\"flex-column flex-grow bordered margined right-panel\">\n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n      <InputTextArea msg={setMessage} change={setShapes} />\n      <div>\n        <button onClick={ ()=>{\n          localStorage.setItem(\"save\",JSON.stringify({attributes:svgAttrs,shapes}));\n          setSaved(true);\n          setMessage(\"SVG shape saved.\");\n         }\n        }>Save</button>\n        <button onClick={()=>{\n          const obj=JSON.parse(localStorage.getItem(\"save\"));\n          if (obj){\n            setShapes(obj.shapes);\n            setSvgAttrs(obj.attributes);\n            setMessage(\"SVG shape loaded.\")\n          }\n        }} disabled={!saved} >Load</button>\n      </div>\n     </div>\n    </div>\n    <div className=\"svg-data margined bordered\">\n    <button onClick={()=>{\n        console.log(\"Create random SVG\");\n             const cSvg=createRandomSVG();\n             console.log({cSvg});\n             setShapes(cSvg.shapes);\n             setSvgAttrs(cSvg.attributes);\n             setMessage(\"Random svg created.\")\n      }}>Randomise the SVG!</button>\n      <BasicAttrEditor\n        element=\"svg\"\n        attrs={svgAttrs}\n        changed={attr => {\n          setSvgAttrs(attr);\n        }}\n        />\n    \n     <AddShape addShape={(shape)=>{\n       setShapes([...shapes,{shape,attributes:defaultValues[shape],id:Date.now()}])\n      }} />\n\n      <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button  title=\"Delete Shape\" onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n        }}>x</button>\n        <ShapeItem  shape={shape} duplicate={(shape)=>{\n          const dup=Object.assign({},shape);\n          dup.id=Date.now();\n          let index=shapes.findIndex(el=>el===shape);\n          setShapes([...shapes.slice(0,index+1),dup,...shapes.slice(index+1)]);\n        }} selected={selectedShape===shape.id}\n        changed={(changedShape)=>{\n          shapes[shapes.findIndex((sh)=>sh===changedShape)]=changedShape;\n          setShapes(shapes.slice());\n        }}\n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n       </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}