{"version":3,"sources":["lib/helper.js","CodePanel.js","BasicAttrEditor.js","ShapeItem.js","InputTextArea.js","SvgView.js","AddShape.js","App.js","serviceWorker.js","index.js"],"names":["start","shape","attributes","cx","cy","r","fill","x","y","width","height","map","el","id","colours","defaultValues","circle","rect","polygon","points","path","d","probably","fraction","Math","random","rnd","max","createRandomShape","type","Object","keys","fromEntries","entries","entry","count","i","push","join","strokeWidth","length","stroke","console","log","attr2string","attrs","key","value","CodePanel","props","svg","svgAttrs","shapes","attrS","className","attrsData","viewBox","def","BasicAttrEditor","useState","controls","setControls","unUsedAttrs","filter","every","control","addAttr","setAddAttr","element","onChange","e","target","onClick","newControls","changed","slice","style","ShapeItem","duplicate","shapeUp","shapeDown","InputTextArea","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","SvgView","zoom","setZoom","setZoomHandler","createRandom","checked","name","ShapeType","data-id","setSelectedShape","AddShape","newShape","setNewShape","shapeName","addShape","App","useEffect","selectedShape","setShapes","setSvgAttrs","localStorage","getItem","saved","setSaved","moveShape","step","movedShape","index","findIndex","sh","old","cSvg","Date","now","createRandomSVG","setItem","JSON","stringify","obj","parse","disabled","attr","dup","assign","selected","changedShape","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2ef95f0.chunk.js","sourcesContent":["export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map( (el,id)=>({...el,id }) );\n\nexport const colours = [\"brown\",\"black\",\"red\",\"blue\",\"green\",\"yellow\",\"pink\",\"purple\",'teal','orange','wheat','coral','crimson']\n\nexport const defaultValues = {\n  circle: { cx:50,cy:30,r:10},\n  rect: {x:20,y:50,width:40,height:20},\n  polygon: {points:\"10 10 45 15 20 35\"},\n  path: {d:\"M 10 10 C 200 200, 400 20, 50 10\"}\n};\n\nexport const probably = (fraction) => Math.random() < fraction;\nexport const rnd = (max) => (Math.random()*max)>>0;\n\n\nexport const createRandomShape=()=>{\n  const shapes=Object.keys(defaultValues);\n  // const type=shapes[rnd(shapes.length)]\n  const type=shapes[rnd(3)]\n  const shape={shape:type};\n  if (type==='circle'||type==='rect'){\n    shape.attributes=Object.fromEntries( Object.entries( defaultValues[type]).map(entry=>{\n      entry[1]=rnd( (entry[0]===\"r\"||entry[0]===\"width\"||entry[0]===\"height\")?540:720);\n      return entry\n    }) );\n    \n  } else if (type==='polygon'){\n    const points=[];\n    const count=rnd(12);\n    for (let i=0;i<count;i++){\n      points.push(rnd(720));\n      points.push(rnd(720));\n\n    }\n    shape.attributes={points:points.join(' ')}\n  }\n  if (probably(0.5)){\n    shape.attributes.strokeWidth=rnd(10)+1;\n  }\n  if (probably(0.7)){\n    shape.attributes.fill=colours[rnd(colours.length)];\n  }\n  if (probably(0.4)){\n    shape.attributes.stroke=colours[rnd(colours.length)];\n  }\n  console.log(type,shape)\n  return shape;\n\n}\n\nexport const createRandomSVG = ()=>{\n  const shapes =[];\n  const attributes = {viewBox:\"0 0 720 720\"}\n  const svg = {attributes,shapes}\n  const count = rnd(6)+3;\n  for (let i=0;i<count;i++){\n    shapes.push({...createRandomShape(),id:Date.now()+\"\"+i});\n  }\n  console.log(count);\n  return svg\n}\n","import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"code-panel\">\n      <h3 className=\"header\">Source code:</h3>\n      <pre className=\"code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\n\nconst attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\"\n  },\n  fill: {\n    def: \"pink\"\n  },\n  stroke: {\n    def: \"purple\"\n  },\n  strokeWidth:{\n    def:\"1\"\n  }\n};\n\nconst BasicAttrEditor = props => {\n  const [controls, setControls] = useState(Object.entries(props.attrs));\n  const unUsedAttrs = Object.keys(attrsData).filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(props.element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper\">\n      <span>{props.element}</span>\n      <select\n        value={addAttr}\n        onChange={e => {\n          console.log(e.target.value);\n          setAddAttr(e.target.value);\n        }}\n      >\n        {unUsedAttrs.map(key => (\n          <option key={key}>{key}</option>\n        ))}\n      </select>\n\n      <button\n        onClick={() => {\n          console.log({ addAttr });\n          const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n          setControls(newControls);\n          setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n          props.changed(Object.fromEntries(newControls));\n        }}\n      >\n        +\n      </button>\n      {controls.map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            \n            <span className=\"key-name\">{key}</span>\n            <input\n              onChange={e => {\n                controls[i][1] = e.target.value;\n                setControls(controls.slice());\n                props.changed(Object.fromEntries(controls));\n            }}\n            style={{ width: (value+\"\").length / 2 + \"rem\" }}\n              value={value}\n            />\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BasicAttrEditor;\n","import React from 'react';\nimport BasicAttrEditor from './BasicAttrEditor.js';\nimport './ShapeItem.css';\n\nconst ShapeItem = (props) => {\n    const shape = props.shape;\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <div className=\"move-up-down-buttons\">\n          <button onClick={()=>{\n            props.duplicate(shape);\n          }} className=\"dup-shape-button\">\n            *\n          </button>\n            <button className=\"move-up-button\"\n              onClick={() => {\n                  props.shapeUp(shape);\n              }}>&#x21E7;</button>\n            <button className=\"move-down-button\" onClick={() => {\n                props.shapeDown(shape);\n              }}\n            >&#x21E9;</button>\n        </div>\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          changed={attrs => {\n            shape.attributes=attrs;\n            props.changed(shape);\n          }}\n        />\n       \n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n        <div className=\"flex-column  margined\">\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         const shapes=Array.from(svg.children).map(child=>{\n           const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n           return {id:id++,attributes:atts,shape:child.tagName}\n        })\n        props.change(shapes);\n      }\n      }>parse</button>\n      \n        </div>\n    )\n}\n\nexport default InputTextArea;","import React,{useState} from 'react';\nimport './SvgView.css';\n\n\n\n\nconst SvgView = (props) => {\n    const [zoom,setZoom] = useState(400);\n\n    const setZoomHandler = zoom => () => setZoom(zoom);\n    return (\n        <div className=\"svg-display margined\">\n            <div className=\"svg-zoom-control flex-row flex-align-center\">\n                {/* <span className=\"header\">Zoom:</span> */}\n                <button onClick={props.createRandom}>Random</button>\n                <span >Zoom:</span>\n\n                <label>\n                  <input type=\"radio\" checked={zoom===100} onChange={setZoomHandler(100)} name=\"zoom-radios\" />\n                  100\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===200} onChange={setZoomHandler(200)} name=\"zoom-radios\" />\n                    200\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===400} onChange={setZoomHandler(400)} name=\"zoom-radios\" />\n                    400\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===800} onChange={setZoomHandler(800)} name=\"zoom-radios\" />\n                    800\n                </label>\n            </div>\n        <svg {...props.attrs} className=\"Svg-view\" style={{width:zoom}}>\n        {props.shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType data-id={shape.id} onClick={(e)=>{\n            props.setSelectedShape(shape.id)\n          }} key={i} {...shape.attributes} />;\n        })}\n      </svg>\n        </div>\n    )\n}\n\nexport default SvgView;\n","import React,{useState} from 'react';\nimport './AddShape.css';\nimport {defaultValues} from './lib/helper.js'\n\nconst AddShape = (props) => {\n    const [newShape, setNewShape] = useState(\"circle\");\n    return (\n        <>\n         <select\n          value={newShape}\n          onChange={e => {\n           setNewShape(e.target.value);\n          }}\n         >{\n          Object.keys(defaultValues).map(shapeName=>(<option key={shapeName}>{shapeName}</option>))\n         }\n         </select>\n      <button\n        onClick={() => {\n          props.addShape(newShape)\n        }}\n      >Add Shape</button>\n        </>\n    );\n}\n\nexport default AddShape;","import React, { useState, useEffect } from \"react\";\nimport { start, defaultValues, createRandomSVG } from \"./lib/helper.js\";\nimport \"./App.css\";\n\nimport CodePanel from \"./CodePanel.js\";\nimport BasicAttrEditor from \"./BasicAttrEditor.js\";\nimport ShapeItem from \"./ShapeItem\";\nimport InputTextArea from './InputTextArea';\nimport SvgView from './SvgView.js';\nimport AddShape from './AddShape.js';\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"RENDER\",{selectedShape});\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 720 720\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n  const [saved,setSaved] = useState(localStorage.getItem('save'));\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n  return (\n    <>\n    <header>\n      <h1>Svarog</h1>\n    </header>\n    <div className=\"flex-row\">\n\n      <SvgView shapes={shapes} attrs={svgAttrs} setSelectedShape={setSelectedShape} createRandom={()=>{\n        console.log(\"Create random SVG\");\n             const cSvg=createRandomSVG();\n             console.log({cSvg});\n             setShapes(cSvg.shapes);\n             setSvgAttrs(cSvg.attributes);\n      }}/>\n     <div className=\"flex-column flex-grow bordered margined\">\n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n      <InputTextArea change={setShapes} />\n      <div>\n        <button onClick={ ()=>{\n          localStorage.setItem(\"save\",JSON.stringify({attributes:svgAttrs,shapes}));\n          setSaved(true);\n         }\n        }>Save</button>\n        <button onClick={()=>{\n          const obj=JSON.parse(localStorage.getItem(\"save\"));\n          if (obj){\n            setShapes(obj.shapes);\n            setSvgAttrs(obj.attributes);\n          }\n        }} disabled={!saved} >Load</button>\n      </div>\n     </div>\n    </div>\n    <div className=\"svg-data margined bordered\">\n\n      <BasicAttrEditor\n        element=\"svg\"\n        attrs={svgAttrs}\n        changed={attr => {\n          setSvgAttrs(attr);\n        }}\n        />\n    \n     <AddShape addShape={(shape)=>{\n       setShapes([...shapes,{shape,attributes:defaultValues[shape],id:Date.now()}])\n      }} />\n\n      <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n        }}>x</button>\n        <ShapeItem  shape={shape} duplicate={(shape)=>{\n          const dup=Object.assign({},shape);\n          dup.id=Date.now();\n          let index=shapes.findIndex(el=>el===shape);\n          setShapes([...shapes.slice(0,index+1),dup,...shapes.slice(index+1)]);\n        }} selected={selectedShape===shape.id}\n        changed={(changedShape)=>{\n          shapes[shapes.findIndex((sh)=>sh===changedShape)]=changedShape;\n          setShapes(shapes.slice());\n        }}\n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n       </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}