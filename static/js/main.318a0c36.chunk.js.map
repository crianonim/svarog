{"version":3,"sources":["lib/helper.js","CodePanel.js","BasicAttrEditor.js","InputTextArea.js","SvgView.js","AddShape.js","Messages.js","CurrentShapePanel.js","AttrList.js","ShapeItem.js","ShapesList.js","SvgProperties.js","SaveLoadPanel.js","App.js","serviceWorker.js","index.js"],"names":["start","shape","attributes","cx","cy","r","fill","x","y","width","height","map","el","id","attrsData","viewBox","def","type","stroke","strokeWidth","points","d","x1","y1","x2","y2","defaultValues","circle","rect","polygon","path","line","probably","fraction","Math","random","rnd","max","createRandomShape","Object","keys","fromEntries","entries","entry","count","i","push","join","randomColorString","console","log","_","n","toString","attr2string","attrs","key","value","CodePanel","props","svg","svgAttrs","shapes","attrS","className","removeAttributeFromShape","attributeName","filter","BasicAttrEditor","element","changed","useState","controls","setControls","unUsedAttrs","attr","includes","every","control","addAttr","setAddAttr","onChange","e","target","onClick","newControls","slice","style","length","color","changedAttrs","InputTextArea","fakeDOM","document","createElement","innerHTML","querySelector","children","Array","from","child","atts","getAttributeNames","att","getAttribute","tagName","change","msg","SvgView","zoom","setZoom","setZoomHandler","checked","name","ShapeType","data-id","setSelectedShape","AddShape","newShape","setNewShape","shapeName","addShape","parseMessage","message","toLowerCase","substring","Messages","dismiss","CurrentShapePanel","AttrList","ShapeItem","duplicate","shapeUp","shapeDown","title","ShapesList","selectedShape","setShapes","moveShape","dup","assign","Date","now","index","findIndex","selected","SvgProperties","isSelected","SaveLoadPanel","setSaved","setMessage","setSvgAttrs","saved","localStorage","setItem","JSON","stringify","obj","parse","getItem","disabled","App","useEffect","svgPropertiesSelected","setSvgPropertiesSelected","cSvg","createRandomSVG","find","step","movedShape","sh","old","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"26BAAO,IAAMA,EAAQ,CACnB,CACEC,MAAO,SACPC,WAAY,CAAEC,GAAI,IAAKC,GAAI,IAAKC,EAAG,GAAIC,KAAM,QAE/C,CACEL,MAAO,SACPC,WAAY,CACVC,GAAI,IACJC,GAAI,IACJC,EAAG,GACHC,KAAM,SAGV,CACEL,MAAO,SACPC,WAAY,CACVC,GAAI,IACJC,GAAI,IACJC,EAAG,IACHC,KAAM,UAGV,CACEL,MAAO,OACPC,WAAY,CACVK,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,OAGZC,IAAK,SAACC,EAAGC,GAAJ,YAAcD,EAAd,CAAiBC,SAEXC,EAAY,CACvBC,QAAS,CACPC,IAAK,cACLJ,GAAG,CAAC,QAENN,KAAM,CACJU,IAAK,OACLC,KAAM,SAERC,OAAQ,CACNF,IAAK,SACLC,KAAM,SAERE,YAAY,CACVH,IAAI,KAENb,GAAG,CACDS,GAAG,CAAC,UACJI,IAAI,KAENZ,GAAG,CACDQ,GAAG,CAAC,UACJI,IAAI,KAENX,EAAE,CACAO,GAAG,CAAC,UACJI,IAAI,IAENP,MAAM,CACJG,GAAG,CAAC,QACJI,IAAI,KAENN,OAAO,CACLE,GAAG,CAAC,QACJI,IAAI,KAGNT,EAAE,CACAK,GAAG,CAAC,QACJI,IAAI,KAGNR,EAAE,CACAI,GAAG,CAAC,QACJI,IAAI,KAGNI,OAAO,CACLR,GAAG,CAAC,WACJI,IAAI,eAENK,EAAE,CACAT,GAAG,CAAC,QACJI,IAAI,WAENM,GAAG,CACDV,GAAG,CAAC,QACJI,IAAI,MAENO,GAAG,CACDX,GAAG,CAAC,QACJI,IAAI,MAENQ,GAAG,CACDZ,GAAG,CAAC,QACJI,IAAI,MAENS,GAAG,CACDb,GAAG,CAAC,QACJI,IAAI,OAQKU,EAAgB,CAC3BC,OAAQ,CAAExB,GAAG,GAAGC,GAAG,GAAGC,EAAE,IACxBuB,KAAM,CAACrB,EAAE,GAAGC,EAAE,GAAGC,MAAM,GAAGC,OAAO,IACjCmB,QAAS,CAACT,OAAO,qBACjBU,KAAM,CAACT,EAAE,oCACTU,KAAM,CAACT,GAAG,GAAGC,GAAG,GAAGC,GAAG,IAAIC,GAAG,IAAIP,OAAO,UAG7Bc,EAAW,SAACC,GAAD,OAAcC,KAAKC,SAAWF,GACzCG,EAAM,SAACC,GAAD,OAAUH,KAAKC,SAASE,GAAM,GAGpCC,EAAkB,WAC7B,IAEMrB,EAFOsB,OAAOC,KAAKd,GAEPU,EAAI,IAChBnC,EAAM,CAACA,MAAMgB,GACnB,GAAW,WAAPA,GAAwB,SAAPA,EACnBhB,EAAMC,WAAWqC,OAAOE,YAAaF,OAAOG,QAAShB,EAAcT,IAAON,IAAI,SAAAgC,GAE5E,OADAA,EAAM,GAAGP,EAAiB,MAAXO,EAAM,IAAqB,UAAXA,EAAM,IAAyB,WAAXA,EAAM,GAAe,IAAI,KACrEA,UAGJ,GAAW,YAAP1B,EAAiB,CAG1B,IAFA,IAAMG,EAAO,GACPwB,EAAMR,EAAI,GAAG,EACVS,EAAE,EAAEA,EAAED,EAAMC,IACnBzB,EAAO0B,KAAKV,EAAI,MAChBhB,EAAO0B,KAAKV,EAAI,MAGlBnC,EAAMC,WAAW,CAACkB,OAAOA,EAAO2B,KAAK,MAgBvC,OAdIf,EAAS,MACX/B,EAAMC,WAAWiB,YAAYiB,EAAI,IAAI,GAEnCJ,EAAS,MAEX/B,EAAMC,WAAWI,KAAK0C,KAGpBhB,EAAS,MAEX/B,EAAMC,WAAWgB,OAAO8B,KAG1BC,QAAQC,IAAIjC,EAAKhB,GACVA,GAGI+C,EAAkB,iBAAI,IAAI,CAAC,EAAE,EAAE,GAAGrC,IAAI,SAAAwC,GAAC,OAAEf,EAAI,OAAMzB,IAAI,SAAAyC,GAAC,OAAEA,EAAEC,SAAS,MAAKN,KAAK,KC9JtFO,G,kBAAc,SAAAC,GAClB,OAAOhB,OAAOG,QAAQa,GACnB5C,IAAI,mCAAE6C,EAAF,KAAOC,EAAP,qBAAqBD,EAArB,aAA6BC,EAA7B,OACJV,KAAK,OAuBKW,EArBG,SAAAC,GAChB,IAAMC,EAAG,iBACJN,EAAYK,EAAME,UADd,eAETF,EAAMG,OACHnD,IAAI,SAAAV,GACH,IAAM8D,EAAQT,EAAYrD,EAAMC,YAChC,MAAM,KAAN,OAAYD,EAAMA,MAAlB,YAA2B8D,EAA3B,QAEDhB,KAAK,MAPC,gBAWT,OACE,yBAAKiB,UAAU,SACb,yBAAKA,UAAU,iBAAf,gBACA,yBAAKA,UAAU,4BACZJ,KCmDHK,G,MAAyB,SAAC/D,EAAWgE,GACzC,OAAOhE,EAAWiE,OAAQ,mCAAEX,EAAF,iBAAWA,IAAMU,MAG9BE,EAzES,SAAC,GAA6B,IAA5Bb,EAA2B,EAA3BA,MAAMc,EAAqB,EAArBA,QAAQC,EAAa,EAAbA,QAAa,EACnBC,mBAAShC,OAAOG,QAAQa,IADL,mBAC5CiB,EAD4C,KAClCC,EADkC,KAEnDxB,QAAQC,IAAI,CAACsB,aACb,IAGME,EAHanC,OAAOG,QAAQ5B,GAChCqD,OAAQ,mCAAIQ,GAAJ,kBAAaA,EAAK/D,IAAM+D,EAAK/D,GAAGgE,SAASP,KACjD1D,IAAI,mCAAE6C,EAAF,iBAAWA,IACcW,OAAO,SAAAX,GAAG,OACvCgB,EAASK,MAAM,SAAAC,GAAO,OAAIA,EAAQ,KAAOtB,MAPQ,EASrBe,mBAASG,EAAY,IATA,mBAS5CK,EAT4C,KASnCC,EATmC,KAWnD,OACE,yBAAKhB,UAAU,6BACb,oDACA,0BAAMA,UAAU,oBAChB,0BAAMA,UAAU,2BACf,4BACCP,MAAOsB,EACPE,SAAU,SAAAC,GACRjC,QAAQC,IAAI,MAAMgC,EAAEC,OAAO1B,OAC3BuB,EAAWE,EAAEC,OAAO1B,SAGrBiB,EAAY/D,IAAI,SAAA6C,GAAG,OAClB,4BAAQA,IAAKA,GAAMA,OAMvB,4BAAQQ,UAAU,qCAChBoB,QAAS,WACPnC,QAAQC,IAAI,CAAE6B,YACd,IAAMM,EAAW,sBAAOb,GAAP,CAAiB,CAACO,EAASjE,EAAUiE,GAAS/D,OAC/DyD,EAAYY,GACZL,EAAWN,EAAYP,OAAO,SAAAX,GAAG,OAAIA,IAAQuB,IAAS,IACtDT,EAAQ/B,OAAOE,YAAY4C,MAN/B,MAUC9C,OAAOG,QAAQa,GAAO5C,IAAI,WAAekC,GAAO,IAAD,mBAAnBW,EAAmB,KAAdC,EAAc,KAC9C,OACE,0BAAMD,IAAKA,EAAKQ,UAAU,aACxB,0BAAMA,UAAU,YAAYR,GAC5B,2BAAOQ,UAAU,qBACfiB,SAAU,SAAAC,GACRV,EAAS3B,GAAG,GAAKqC,EAAEC,OAAO1B,MAC1BgB,EAAYD,EAASc,SACrBrC,QAAQC,IAAI,KAAK,CAACsB,aAClBF,EAAQ/B,OAAOE,YAAY+B,KAE/Be,MAAO,CAAE9E,OAASgD,EAAM,IAAI+B,OAAO,EAAK,OACtC/B,MAAOA,IAEc,UAAtB3C,EAAU0C,GAAKvC,KAAgB,0BAAM+C,UAAU,YAAYuB,MAAO,CAACE,MAAMhC,IAA1C,UAAmE,KACrG,4BAAQO,UAAU,kBAAkBoB,QAAS,WACzC,IAAMM,EAAazB,EAAyBO,EAAShB,GACrDc,EAAQ/B,OAAOE,YAAYiD,IAC3BjB,EAAYiB,KAHhB,UC5BKC,G,MA9BO,SAAChC,GACnB,OACE,yBAAKK,UAAU,SACb,yBAAKA,UAAU,iBAAf,uBACC,yBAAKA,UAAU,eAChB,yBAAKA,UAAU,yBACd,8BAAUA,UAAU,mBACpB,4BAAQA,UAAU,0BAA0BoB,QAAS,WACrD,IAAIvE,EAAG,EACD+E,EAAQC,SAASC,cAAc,OACrCF,EAAQG,UAAUF,SAASG,cAAc,YAAYvC,MACrD,IAAMG,EAAIgC,EAAQK,SAAS,GAC3B,GAAIrC,EAAK,CACP,IAAME,EAAOoC,MAAMC,KAAKvC,EAAIqC,UAAUtF,IAAI,SAAAyF,GACxC,IAAMC,EAAK9D,OAAOE,YAAY2D,EAAME,oBAAoB3F,IAAI,SAAA4F,GAAG,MAAE,CAACA,EAAIH,EAAMI,aAAaD,OACzF,MAAO,CAAC1F,GAAGA,IAAKX,WAAWmG,EAAKpG,MAAMmG,EAAMK,WAE7C9C,EAAM+C,OAAO5C,QAEbH,EAAMgD,IAAI,yBAZb,cCmCMC,G,MAvCC,SAACjD,GAAW,IAAD,EACAY,mBAAS,KADT,mBAChBsC,EADgB,KACXC,EADW,KAGjBC,EAAiB,SAAAF,GAAI,OAAI,kBAAMC,EAAQD,KAC7C,OACI,yBAAK7C,UAAU,wBACX,yBAAKA,UAAU,+CAEX,uCAEA,+BACE,2BAAO/C,KAAK,QAAQ+F,QAAgB,MAAPH,EAAY5B,SAAU8B,EAAe,KAAME,KAAK,gBAD/E,OAIA,+BACE,2BAAOhG,KAAK,QAAQ+F,QAAgB,MAAPH,EAAY5B,SAAU8B,EAAe,KAAME,KAAK,gBAD/E,OAIA,+BACE,2BAAOhG,KAAK,QAAQ+F,QAAgB,MAAPH,EAAY5B,SAAU8B,EAAe,KAAME,KAAK,gBAD/E,OAIA,+BACE,2BAAOhG,KAAK,QAAQ+F,QAAgB,MAAPH,EAAY5B,SAAU8B,EAAe,KAAME,KAAK,gBAD/E,QAKR,yCAAStD,EAAMJ,MAAf,CAAsBS,UAAU,WAAWoB,QAASnC,QAAQC,IAAKqC,MAAO,CAAC9E,MAAMoG,KAC9ElD,EAAMG,OAAOnD,IAAI,SAACV,EAAO4C,GACxB,IAAMqE,EAAYjH,EAAMA,MACxB,OAAO,kBAACiH,EAAD,eAAWC,UAASlH,EAAMY,GAAIuE,QAAS,SAACF,GAC7CvB,EAAMyD,iBAAiBnH,EAAMY,KAC5B2C,IAAKX,GAAO5C,EAAMC,mBCDhBmH,G,MAjCE,SAAA1D,GAAU,IAAD,EACQY,mBAAS,UADjB,mBACjB+C,EADiB,KACPC,EADO,KAExB,OACE,0BAAMvD,UAAU,qCACd,0BAAMA,UAAU,WACd,0BAAMA,UAAU,mBAEhB,4BACEP,MAAO6D,EACPrC,SAAU,SAAAC,GACRqC,EAAYrC,EAAEC,OAAO1B,SAGtBlB,OAAOC,KAAKd,GAAef,IAAI,SAAA6G,GAAS,OACvC,4BAAQhE,IAAKgE,GAAYA,QAK/B,0BAAMxD,UAAU,WACd,4BACEA,UAAU,8BACVoB,QAAS,WACPzB,EAAM8D,SAASH,KAHnB,iBCbFI,G,MAAe,SAAAC,GACjB,IAAKA,EAAS,MAAO,CAAC,GAAG,SACzB,IAAI1G,EAAK,IACL0F,EAAIgB,EAKR,MAJiB,MAAbA,EAAQ,KACR1G,EAAK0G,EAAQ,GAAGC,cAChBjB,EAAIgB,EAAQE,UAAU,IAEnB,CAAC5G,EAAK0F,KAEFmB,EAlBE,SAACnE,GAAS,IAAD,EACH+D,EAAa/D,EAAMgE,SADhB,mBACf1G,EADe,KACV0F,EADU,KAEtB,OACA,yBAAK3C,UAAW,sBAAuBL,EAAMgE,QAAS,GAAG,aAAevC,QAASzB,EAAMoE,SACtF,uBAAG/D,UAAW,wBAAwB/C,GAAO0F,KCgBnCqB,EApBW,SAAC,GAAmB,IAAlB/H,EAAiB,EAAjBA,MAAMqE,EAAW,EAAXA,QAE9B,OADArB,QAAQC,IAAI,CAACjD,SAAO,CAACqE,YAEjB,yBAAKN,UAAU,SACb,yBAAKA,UAAU,iBAAf,mCAA+D,2BAAI/D,EAAMA,QAC3E,yBAAK+D,UAAU,eAEf,kBAAC,EAAD,CACEK,QAASpE,EAAMA,MACfsD,MAAOtD,EAAMC,WACboE,QAAS,SAAAf,GACPtD,EAAMC,WAAWqD,EACjBe,EAAQrE,SCMLgI,G,MAnBE,SAAC,GAAqB,IAApB5D,EAAmB,EAAnBA,QAAQd,EAAW,EAAXA,MACzB,OACE,yBAAKS,UAAU,yCACb,8BAAOK,GAEN9B,OAAOG,QAAQa,GAAO5C,IAAI,WAAekC,GAAO,IAAD,mBAAnBW,EAAmB,KAAdC,EAAc,KAC9C,OACE,0BAAMD,IAAKA,EAAKQ,UAAU,aACxB,0BAAMA,UAAU,YAAYR,GAC5B,0BAAMQ,UAAU,IAAIP,SC0BjByE,EAjCG,SAAC,GAA0D,IAAzDjI,EAAwD,EAAxDA,MAAMkI,EAAkD,EAAlDA,UAAUC,EAAwC,EAAxCA,QAAQC,EAAgC,EAAhCA,UAAUjB,EAAsB,EAAtBA,iBAClD,OACC,yBAAK5D,IAAKvD,EAAMY,GAAImD,UAAU,wBAC3B,yBAAKA,UAAU,wBACb,4BAAQoB,QAAS,WACf+C,EAAUlI,IACT+D,UAAU,6BACbsE,MAAM,mBAHN,KAOE,4BAAQA,MAAM,UAAWtE,UAAU,yCACjCoB,QAAS,WACLgD,EAAQnI,KAFd,UAIA,4BAAQqI,MAAM,YAAYtE,UAAU,4CAA4CoB,QAAS,WACrFiD,EAAUpI,KADd,WAMJ,0BAAMmF,QAAS,WAAKgC,EAAiBnH,EAAMY,MAE3C,kBAAC,EAAD,CACEwD,QAASpE,EAAMA,MACfsD,MAAOtD,EAAMC,gBCARqI,EA1BI,SAAC,GAAiE,IAAhEzE,EAA+D,EAA/DA,OAAO0E,EAAwD,EAAxDA,cAAcC,EAA0C,EAA1CA,UAAUrB,EAAgC,EAAhCA,iBAAiBsB,EAAe,EAAfA,UACjE,OAAQ,oCACP,yBAAK1E,UAAU,eACbF,EAAOnD,IAAK,SAAAV,GAAK,OAChB,yBAAKuD,IAAKvD,EAAMY,GAAImD,UAAW,aAAc/D,EAAMY,KAAK2H,EAAc,iBAAiB,KACvF,4BAAQxE,UAAU,6BAA6BsE,MAAM,eAAelD,QAAS,WAC3EqD,EAAU3E,EAAOK,OAAO,SAAAvD,GAAE,OAAEA,IAAKX,KACjCmH,EAAiB,QAFnB,KAIA,kBAAC,EAAD,CAAWA,iBAAkBA,EAAkBnH,MAAOA,EAAOkI,UAAW,SAAClI,GACvE,IAAM0I,EAAIpG,OAAOqG,OAAO,GAAG3I,GAC3B0I,EAAI9H,GAAGgI,KAAKC,MACZ,IAAIC,EAAMjF,EAAOkF,UAAU,SAAApI,GAAE,OAAEA,IAAKX,IACpCwI,EAAU,GAAD,mBAAK3E,EAAOwB,MAAM,EAAEyD,EAAM,IAA1B,CAA6BJ,GAA7B,YAAoC7E,EAAOwB,MAAMyD,EAAM,OAC/DE,SAAUT,IAAgBvI,EAAMY,GAEnCuH,QAASM,GAAW,GACpBL,UAAWK,EAAU,WCVdQ,EAPO,SAAC,GAAwB,IAAvB3F,EAAsB,EAAtBA,MAAM4F,EAAgB,EAAhBA,WAC1B,OACI,yBAAKnF,UAAWmF,EAAW,iBAAiB,IAC5C,kBAAC,EAAD,CAAU9E,QAAQ,MAAMd,MAAOA,MCiBxB6F,EArBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAASC,EAAX,EAAWA,WAAWb,EAAtB,EAAsBA,UAAUc,EAAhC,EAAgCA,YAAYC,EAA5C,EAA4CA,MAAM1F,EAAlD,EAAkDA,OAAOD,EAAzD,EAAyDA,SAAzD,OAChB,yBAAKG,UAAU,SACX,yBAAKA,UAAU,iBAAf,+BACA,yBAAKA,UAAU,eAEX,4BAAQA,UAAU,mCAAmCoB,QAAU,WAC3DqE,aAAaC,QAAQ,OAAOC,KAAKC,UAAU,CAAC1J,WAAW2D,EAASC,YAChEuF,GAAS,GACTC,EAAW,sBAHf,QAKA,4BAAQtF,UAAU,iCAAiCoB,QAAS,WACxD,IAAMyE,EAAIF,KAAKG,MAAML,aAAaM,QAAQ,SACtCF,IACApB,EAAUoB,EAAI/F,QACdyF,EAAYM,EAAI3J,YAChBoJ,EAAW,uBAEhBU,UAAWR,GAPd,WCkGGS,EA/FH,WACVC,oBAAU,WAER,OADAjH,QAAQC,IAAI,SAAS,CAACsF,kBACf,WACLvF,QAAQC,IAAI,eAJA,MASYqB,mBAASvE,GATrB,mBAST8D,EATS,KASD2E,EATC,OAUgBlE,mBAAS,CAAExD,QAAS,gBAVpC,mBAUT8C,EAVS,KAUC0F,EAVD,OAW0BhF,mBAAS,MAXnC,mBAWTiE,EAXS,KAWMpB,EAXN,OAYS7C,mBAASkF,aAAaM,QAAQ,SAZvC,mBAYTP,EAZS,KAYHH,EAZG,OAaa9E,mBAAS,MAbtB,mBAaToD,EAbS,KAaD2B,EAbC,OAcuC/E,oBAAS,GAdhD,mBAcT4F,EAdS,KAcaC,EAdb,KAwBhB,OACE,yBAAKpG,UAAU,IACf,gCACE,4BAAI,0BAAMA,UAAU,iBAAhB,MAAJ,MAAgD,0BAAMA,UAAU,iBAAhB,MAChD,mHAEF,kBAAC,EAAD,CAAW2D,QAASA,EAASI,QAAS,kBAAIuB,EAAW,SACrD,yBAAKtF,UAAU,SACb,kBAAC,EAAD,CAASF,OAAQA,EAAQP,MAAOM,EAAUuD,iBAAkB,SAACnH,GAASmH,EAAiBnH,GAAOmK,GAAyB,MAGzH,yBAAKpG,UAAU,SACd,yBAAKA,UAAU,iBAAf,iBAEG,yBAAKA,UAAU,eACb,yBAAKA,UAAU,YACf,4BAAQA,UAAU,6CAA6CoB,QAAS,WACtE,IAAMiF,Eb2Ga,WAK7B,IAJA,IAAMvG,EAAQ,GAERF,EAAM,CAAC1D,WADM,CAACa,QAAQ,eACJ+C,UAClBlB,EAAQR,EAAI,GAAG,EACZS,EAAE,EAAEA,EAAED,EAAMC,IACnBiB,EAAOhB,KAAP,KAAgBR,IAAhB,CAAoCzB,GAAGgI,KAAKC,MAAM,GAAGjG,KAGvD,OADAI,QAAQC,IAAIN,GACLgB,EapHc0G,GACX7B,EAAU4B,EAAKvG,QACfyF,EAAYc,EAAKnK,YACjBoJ,EAAW,yBAJb,aAMA,4BAAQtF,UAAU,4CAA4CoB,QAAS,kBAAIqD,EAAU,MAArF,SACA,kBAAC,EAAD,CAAUhB,SAAU,SAACxH,GACrBwI,EAAU,GAAD,mBAAK3E,GAAL,CAAY,CAAC7D,QAAMC,WAAWwB,EAAczB,GAAOY,GAAGgI,KAAKC,gBAQvD,OAAhBN,GACD,kBAAC,EAAD,CAAmBhF,IAAKgF,EAAevI,MAAO6D,EAAOyG,KAAK,SAAA3J,GAAE,OAAEA,EAAGC,KAAK2H,IAAgBlE,QAAS,SAACrE,GAAS6D,EAAOA,EAAOkF,UAAU,SAAApI,GAAE,OAAEA,EAAGC,KAAK2H,KAAgBvI,EAAMwI,EAAU,YAAI3E,OAE/KqG,GACF,kBAAC,EAAD,CAAmBlK,MAAQ,CAACA,MAAM,MAAMC,WAAW2D,GAAYS,QAAS,SAACV,GAAO2F,EAAY3F,EAAI1D,eAGhG,yBAAK8D,UAAU,SACd,yBAAKA,UAAU,iBAAf,0BACA,yBAAKA,UAAU,eACd,6BACC,0BAAMoB,QAAS,WAAKgC,EAAiB,MAAMgD,GAAyB,KACnE,kBAAC,EAAD,CAAejB,WAAYgB,EAAuB5G,MAAOM,EAAUS,QAAS,SAAAK,GAC5E4E,EAAY5E,OAGb,kBAAC,EAAD,CAAYb,OAAQA,EAAQsD,iBAAkB,SAACnH,GAASmH,EAAiBnH,GAAOmK,GAAyB,IAAS5B,cAAeA,EAAeC,UAAWA,EAAWC,UAvD3J,SAAC8B,GAAD,OAAU,SAACC,GAC3B,IAAM1B,EAAMjF,EAAOkF,UAAU,SAAC0B,GAAD,OAAMA,IAAKD,IAC5BE,EAAI7G,EAAOiF,EAAMyB,GACvB1G,EAAOiF,EAAMyB,GAAMC,EACnB3G,EAAOiF,GAAO4B,EACdlC,EAAU3E,EAAOwB,gBAsDrB,yBAAKtB,UAAU,uDASf,kBAAC,EAAD,CAAWF,OAAQA,EAAQD,SAAUA,IACrC,kBAAC,EAAD,CAAe8C,IAAK2C,EAAY5C,OAAQ+B,IACxC,kBAAC,EAAD,CAAee,MAAOA,EAAOH,SAAUA,EAAUC,WAAYA,EAAYb,UAAWA,EAAWc,YAAaA,EAAazF,OAAQA,EAAQD,SAAUA,QC1FrI+G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASrF,SAASsF,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.318a0c36.chunk.js","sourcesContent":["export const start = [\n  {\n    shape: \"circle\",\n    attributes: { cx: 151, cy: 132, r: 52, fill: \"red\" }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 101,\n      cy: 120,\n      r: 40,\n      fill: \"pink\"\n    }\n  },\n  {\n    shape: \"circle\",\n    attributes: {\n      cx: 601,\n      cy: 420,\n      r: 140,\n      fill: \"green\"\n    }\n  },\n  {\n    shape: \"rect\",\n    attributes: {\n      x: 40,\n      y: 320,\n      width: 140,\n      height: 200\n    }\n  }\n].map( (el,id)=>({...el,id }) );\n\nexport const attrsData = {\n  viewBox: {\n    def: \"0 0 360 360\",\n    el:[\"svg\"]\n  },\n  fill: {\n    def: \"pink\",\n    type: \"color\"\n  },\n  stroke: {\n    def: \"purple\",\n    type: \"color\"\n  },\n  strokeWidth:{\n    def:\"1\"\n  },\n  cx:{\n    el:[\"circle\"],\n    def:360\n  },\n  cy:{\n    el:[\"circle\"],\n    def:360\n  },\n  r:{\n    el:[\"circle\"],\n    def:12\n  },\n  width:{\n    el:[\"rect\"],\n    def:100,\n  },\n  height:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  x:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  y:{\n    el:[\"rect\"],\n    def:100,\n\n  },\n  points:{\n    el:[\"polygon\"],\n    def:\"10 40 50 90\"\n  },\n  d:{\n    el:[\"path\"],\n    def:\"M 10 10\"\n  },\n  x1:{\n    el:[\"line\"],\n    def:\"10\"\n  },\n  y1:{\n    el:[\"line\"],\n    def:\"20\"\n  },\n  x2:{\n    el:[\"line\"],\n    def:\"30\"\n  },\n  y2:{\n    el:[\"line\"],\n    def:\"40\"\n  },\n};\n\n\n\nexport const colours = [\"brown\",\"black\",\"red\",\"blue\",\"green\",\"yellow\",\"pink\",\"purple\",'teal','orange','wheat','coral','crimson']\n\nexport const defaultValues = {\n  circle: { cx:50,cy:30,r:10},\n  rect: {x:20,y:50,width:40,height:20},\n  polygon: {points:\"10 10 45 15 20 35\"},\n  path: {d:\"M 10 10 C 200 200, 400 20, 50 10\"},\n  line: {x1:10,y1:20,x2:120,y2:230,stroke:\"black\"}\n};\n\nexport const probably = (fraction) => Math.random() < fraction;\nexport const rnd = (max) => (Math.random()*max)>>0;\n\n\nexport const createRandomShape=()=>{\n  const shapes=Object.keys(defaultValues);\n  // const type=shapes[rnd(shapes.length)]\n  const type=shapes[rnd(3)]\n  const shape={shape:type};\n  if (type==='circle'||type==='rect'){\n    shape.attributes=Object.fromEntries( Object.entries( defaultValues[type]).map(entry=>{\n      entry[1]=rnd( (entry[0]===\"r\"||entry[0]===\"width\"||entry[0]===\"height\")?540:720);\n      return entry\n    }) );\n    \n  } else if (type==='polygon'){\n    const points=[];\n    const count=rnd(8)+4;\n    for (let i=0;i<count;i++){\n      points.push(rnd(720));\n      points.push(rnd(720));\n\n    }\n    shape.attributes={points:points.join(' ')}\n  }\n  if (probably(0.5)){\n    shape.attributes.strokeWidth=rnd(10)+1;\n  }\n  if (probably(0.7)){\n    // shape.attributes.fill=colours[rnd(colours.length)];\n    shape.attributes.fill=randomColorString();\n\n  }\n  if (probably(0.4)){\n    // shape.attributes.stroke=colours[rnd(colours.length)];\n    shape.attributes.stroke=randomColorString();\n\n  }\n  console.log(type,shape)\n  return shape;\n\n}\nexport const randomColorString=()=>\"#\"+[0,0,0].map(_=>rnd(256)).map(n=>n.toString(16)).join('');\n\nexport const createRandomSVG = ()=>{\n  const shapes =[];\n  const attributes = {viewBox:\"0 0 720 720\"}\n  const svg = {attributes,shapes}\n  const count = rnd(6)+3;\n  for (let i=0;i<count;i++){\n    shapes.push({...createRandomShape(),id:Date.now()+\"\"+i});\n  }\n  console.log(count);\n  return svg\n}\n","import React from \"react\";\nimport \"./CodePanel.css\";\n\nconst attr2string = attrs => {\n  return Object.entries(attrs)\n    .map(([key, value]) => `${key}=\"${value}\"`)\n    .join(\" \");\n};\nconst CodePanel = props => {\n  const svg = `\n<svg ${attr2string(props.svgAttrs)}> \n${props.shapes\n    .map(shape => {\n      const attrS = attr2string(shape.attributes);\n      return ` <${shape.shape} ${attrS}/>`;\n    })\n    .join(\"\\n\")}\n</svg>\n  `;\n  \n  return (\n    <div className=\"panel\">\n      <div className=\"panel-heading\">Source code:</div>\n      <pre className=\"panel-block code-content\">\n        {svg}\n      </pre>\n    </div>\n  );\n};\nexport default CodePanel;\n","import React, { useState } from \"react\";\nimport './BasicAttrEditor.css';\nimport {attrsData} from './lib/helper.js';\n\n\n\nconst BasicAttrEditor = ({attrs,element,changed}) => {\n  const [controls, setControls] = useState(Object.entries(attrs));\n  console.log({controls})\n  const validAttrs = Object.entries(attrsData)\n   .filter( ([_,attr])=>!attr.el || attr.el.includes(element))\n   .map(([key,_])=>key);\n  const unUsedAttrs = validAttrs.filter(key =>\n    controls.every(control => control[0] !== key)\n  );\n  const [addAttr, setAddAttr] = useState(unUsedAttrs[0]);\n  // console.log(element, unUsedAttrs);\n  return (\n    <div className=\"flex-row flex-wrap  block\">\n      <span>Add property: &nbsp;</span>\n      <span className=\"field has-addons\">\n      <span className=\"control select is-small\">\n       <select \n        value={addAttr}\n        onChange={e => {\n          console.log(\"BAE\",e.target.value);\n          setAddAttr(e.target.value);\n       }}\n      >\n        {unUsedAttrs.map(key => (\n          <option key={key}>{key}</option>\n          ))}\n       </select>\n      </span>\n      \n\n      <button className=\"control button is-small is-primary\"\n        onClick={() => {\n          console.log({ addAttr });\n          const newControls = [...controls, [addAttr, attrsData[addAttr].def]];\n          setControls(newControls);\n          setAddAttr(unUsedAttrs.filter(key => key !== addAttr)[0]);\n          changed(Object.fromEntries(newControls));\n        }}\n      >+</button>\n      </span>\n      {Object.entries(attrs).map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            <span className=\"key-name\">{key}</span>\n            <input className=\"input is-small    \"\n              onChange={e => {\n                controls[i][1] = e.target.value;\n                setControls(controls.slice());\n                console.log(\"NV\",{controls})\n                changed(Object.fromEntries(controls));\n            }}\n            style={{ width: ((value+\"\").length+1) + \"rem\" }}\n              value={value}\n            />\n            {attrsData[key].type===\"color\"?(<span className=\"color-box\" style={{color:value}}>&#x2588;</span>):null}\n          <button className=\"button is-small\" onClick={()=>{\n              const changedAttrs=removeAttributeFromShape(controls,key)\n              changed(Object.fromEntries(changedAttrs))\n              setControls(changedAttrs);\n              }\n            }>x</button>\n          </span>\n\n        );\n      })}\n    </div>\n  );\n};\n\nconst removeAttributeFromShape=(attributes,attributeName)=>{\n  return attributes.filter( ([key,_])=>key!==attributeName );\n}\n\nexport default BasicAttrEditor;\n","import React from \"react\";\nimport './InputTextArea.css';\n\nconst InputTextArea = (props) => {\n    return (\n      <div className=\"panel\">\n        <div className=\"panel-heading\">Parse your SVG code</div>\n         <div className=\"panel-block\">  \n        <div className=\"flex-column  margined\">\n         <textarea className=\"parse-input-ta\"></textarea>\n         <button className=\"button is-small is-info\" onClick={()=>{\n         let id=1;\n         const fakeDOM=document.createElement('div');\n         fakeDOM.innerHTML=document.querySelector('textarea').value;\n         const svg=fakeDOM.children[0];\n         if (svg) {\n           const shapes=Array.from(svg.children).map(child=>{\n             const atts=Object.fromEntries(child.getAttributeNames().map(att=>[att,child.getAttribute(att)]));\n             return {id:id++,attributes:atts,shape:child.tagName}\n            })\n            props.change(shapes);\n          } else {\n            props.msg(\"E#Badly formed SVG.\")\n          }\n      }\n      }>Parse</button>\n        </div>\n        </div>\n      \n      </div>      \n    )\n}\n\nexport default InputTextArea;","import React,{useState} from 'react';\nimport './SvgView.css';\n\n\n\n\nconst SvgView = (props) => {\n    const [zoom,setZoom] = useState(400);\n\n    const setZoomHandler = zoom => () => setZoom(zoom);\n    return (\n        <div className=\"svg-display margined\">\n            <div className=\"svg-zoom-control flex-row flex-align-center\">\n               \n                <span >Zoom:</span>\n\n                <label>\n                  <input type=\"radio\" checked={zoom===100} onChange={setZoomHandler(100)} name=\"zoom-radios\" />\n                  100\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===200} onChange={setZoomHandler(200)} name=\"zoom-radios\" />\n                    200\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===400} onChange={setZoomHandler(400)} name=\"zoom-radios\" />\n                    400\n                </label>\n                <label>\n                  <input type=\"radio\" checked={zoom===800} onChange={setZoomHandler(800)} name=\"zoom-radios\" />\n                    800\n                </label>\n            </div>\n        <svg {...props.attrs} className=\"Svg-view\" onClick={console.log} style={{width:zoom}}>\n        {props.shapes.map((shape, i) => {\n          const ShapeType = shape.shape;\n          return <ShapeType data-id={shape.id} onClick={(e)=>{\n            props.setSelectedShape(shape.id)\n          }} key={i} {...shape.attributes} />;\n        })}\n      </svg>\n        </div>\n    )\n}\n\nexport default SvgView;\n","import React, { useState } from \"react\";\nimport \"./AddShape.css\";\nimport { defaultValues } from \"./lib/helper.js\";\n\nconst AddShape = props => {\n  const [newShape, setNewShape] = useState(\"circle\");\n  return (\n    <span className=\"field has-addons has-hmargin-med \">\n      <span className=\"control\">\n        <span className=\"select is-small\">\n\n        <select\n          value={newShape}\n          onChange={e => {\n            setNewShape(e.target.value);\n          }}\n          >\n          {Object.keys(defaultValues).map(shapeName => (\n            <option key={shapeName}>{shapeName}</option>\n            ))}\n        </select>\n            </span>\n      </span>\n      <span className=\"control\">\n        <button\n          className=\"button  is-small is-primary\"\n          onClick={() => {\n            props.addShape(newShape);\n          }}\n        >\n          Add Shape\n        </button>\n      </span>\n    </span>\n  );\n};\n\nexport default AddShape;\n","import React from 'react';\nimport './Messages.css';\n\nconst Messages = (props)=>{\n    const [type,msg] = parseMessage(props.message);\n    return (\n    <div className={\"bordered margined \"+ (props.message ?\"\":\"invisible\")}  onClick={props.dismiss}>\n     <p className={\"message message-type-\"+type}>{msg}</p>    \n    </div>\n    );\n}\nconst parseMessage = message => {\n    if (!message) return [\"\",\"Empty\"];\n    let type=\"i\";\n    let msg=message;\n    if (message[1]===\"#\"){\n        type=message[0].toLowerCase();\n        msg=message.substring(2);\n    }\n    return [type,msg]\n}\nexport default Messages","import React from 'react';\nimport BasicAttrEditor from './BasicAttrEditor';\n\nconst CurrentShapePanel = ({shape,changed})=>{\n    console.log({shape},{changed})\n    return (\n        <div className=\"panel\">\n          <div className=\"panel-heading\">Edit properties of the selected <b>{shape.shape}</b></div>\n        <div className=\"panel-block\">\n\n        <BasicAttrEditor\n          element={shape.shape}\n          attrs={shape.attributes}\n          changed={attrs => {\n            shape.attributes=attrs;\n            changed(shape);\n          }}\n          />\n          </div>\n        </div>\n    )\n}\n\nexport default CurrentShapePanel;\n","import React from \"react\";\n\nconst AttrList = ({element,attrs}) => {\n  return (\n    <div className=\"flex-row flex-wrap attr-wrapper block\">\n      <span>{element}</span>\n      \n      {Object.entries(attrs).map(([key, value], i) => {\n        return (\n          <span key={key} className=\"attr-pair\">\n            <span className=\"key-name\">{key}</span>\n            <span className=\"\">{value}</span>\n          </span>\n\n        );\n      })}\n    </div>\n  );\n};\n\n\nexport default AttrList;\n","import React from 'react';\nimport './ShapeItem.css';\nimport AttrList from './AttrList.js';\n\nconst ShapeItem = ({shape,duplicate,shapeUp,shapeDown,setSelectedShape}) => {\n    return (\n     <div key={shape.id} className=\"flex-row shape-item \" >\n        <div className=\"move-up-down-buttons\">\n          <button onClick={()=>{\n            duplicate(shape);\n          }} className=\"button is-small is-primary\"\n          title=\"Duplicate Shape\"\n          >\n            *\n          </button>\n            <button title=\"Move Up\"  className=\"move-up-button button is-small is-info\"\n              onClick={() => {\n                  shapeUp(shape);\n              }}>&#x21E7;</button>\n            <button title=\"Move Down\" className=\"move-down-button  button is-small is-info\" onClick={() => {\n                shapeDown(shape);\n              }}\n            >&#x21E9;</button>\n           \n        </div>\n        <span onClick={()=>{setSelectedShape(shape.id)}}>\n\n        <AttrList \n          element={shape.shape}\n          attrs={shape.attributes}\n          />\n        </span>\n       \n    </div>\n    );\n}\n\nexport default ShapeItem;\n","import React from 'react';\nimport ShapeItem from './ShapeItem';\n\nconst ShapesList = ({shapes,selectedShape,setShapes,setSelectedShape,moveShape}) => {\n    return (<>\n     <div className=\"shapes-list\">\n      {shapes.map( shape => (\n        <div key={shape.id} className={\"flex-row \" +(shape.id===selectedShape?\"selected-shape\":\"\")}>\n        <button className=\"button is-small is-danger \" title=\"Delete Shape\" onClick={()=>{\n          setShapes(shapes.filter(el=>el!==shape));\n          setSelectedShape(null)\n        }}>x</button>\n        <ShapeItem setSelectedShape={setSelectedShape} shape={shape} duplicate={(shape)=>{\n          const dup=Object.assign({},shape);\n          dup.id=Date.now();\n          let index=shapes.findIndex(el=>el===shape);\n          setShapes([...shapes.slice(0,index+1),dup,...shapes.slice(index+1)]);\n        }} selected={selectedShape===shape.id}\n        \n        shapeUp={moveShape(-1)}\n        shapeDown={moveShape(1)}\n        ></ShapeItem>\n        </div>\n      ))}\n       </div>\n    \n    </>)\n}\n\nexport default ShapesList;","import React from \"react\"\nimport AttrList from \"./AttrList\";\n\nconst SvgProperties = ({attrs,isSelected}) => {\n    return (\n        <div className={isSelected?'selected-shape':''}>\n        <AttrList element=\"svg\" attrs={attrs}/>\n        </div>\n    )\n}\nexport default SvgProperties","import React from 'react';\n\nconst SaveLoadPanel=({setSaved,setMessage,setShapes,setSvgAttrs,saved,shapes,svgAttrs})=>(\n    <div className=\"panel\">\n        <div className=\"panel-heading\">Save & Load to localStorage</div>\n        <div className=\"panel-block\">\n\n            <button className=\"button is-danger has-hmargin-med\" onClick={ ()=>{\n                localStorage.setItem(\"save\",JSON.stringify({attributes:svgAttrs,shapes}));\n                setSaved(true);\n                setMessage(\"SVG shape saved.\");\n            }}>Save</button>\n            <button className=\"button is-info has-hmargin-med\" onClick={()=>{\n                const obj=JSON.parse(localStorage.getItem(\"save\"));\n                if (obj){\n                    setShapes(obj.shapes);\n                    setSvgAttrs(obj.attributes);\n                    setMessage(\"SVG shape loaded.\")\n                }\n            }} disabled={!saved} >Load</button>\n        </div>\n</div>)\n\nexport default SaveLoadPanel\n","import React, { useState, useEffect } from \"react\";\nimport { start, defaultValues, createRandomSVG } from \"./lib/helper.js\";\nimport \"./App.css\";\nimport \"../node_modules/bulma/css/bulma.min.css\"\nimport CodePanel from \"./CodePanel.js\";\nimport BasicAttrEditor from \"./BasicAttrEditor.js\";\nimport InputTextArea from './InputTextArea';\nimport SvgView from './SvgView.js';\nimport AddShape from './AddShape.js';\nimport Messages from './Messages.js';\nimport CurrentShapePanel from './CurrentShapePanel.js';\nimport ShapesList from \"./ShapesList.js\";\nimport SvgProperties from \"./SvgProperties.js\";\nimport SaveLoadPanel from \"./SaveLoadPanel.js\";\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"RENDER\",{selectedShape});\n    return () => {\n      console.log(\"clean-up\");\n    };\n  });\n   \n  // state\n  const [shapes, setShapes] = useState(start);\n  const [svgAttrs, setSvgAttrs] = useState({ viewBox: \"0 0 720 720\" });\n  const [selectedShape, setSelectedShape] = useState(null);\n  const [saved,setSaved] = useState(localStorage.getItem('save'));\n  const [message,setMessage] = useState(null)\n  const [svgPropertiesSelected,setSvgPropertiesSelected]=useState(true);\n\n  // helpers\n  const moveShape = (step) => (movedShape) => {\n    const index=shapes.findIndex((sh)=>sh===movedShape);\n          const old=shapes[index+step];\n          shapes[index+step]=movedShape;\n          shapes[index]=old;\n          setShapes(shapes.slice())\n  }\n  return (\n    <div className=\"\">\n    <header>\n      <h1><span className=\"title-letters\">Sv</span>aro<span className=\"title-letters\" >g</span></h1>\n      <h2>A slavic deity of celestial fire and blacksmithing that will help you create SVGs.</h2>\n    </header>\n    <Messages  message={message} dismiss={()=>setMessage(null)}/>    \n    <div className=\"block\">\n      <SvgView shapes={shapes} attrs={svgAttrs} setSelectedShape={(shape)=>{setSelectedShape(shape);setSvgPropertiesSelected(false)}} />\n      \n      \n    <div className=\"panel\">\n     <div className=\"panel-heading\">Transform SVG</div>\n      \n        <div className=\"panel-block\">\n          <div className=\"flex-row\">\n          <button className=\"button is-small is-warning has-hmargin-med\" onClick={()=>{\n            const cSvg=createRandomSVG();\n            setShapes(cSvg.shapes);\n            setSvgAttrs(cSvg.attributes);\n            setMessage(\"Random svg created.\")\n          }}>Randomise</button>\n          <button className=\"button is-small is-danger has-hmargin-med\" onClick={()=>setShapes([])}>Clear</button>\n          <AddShape addShape={(shape)=>{\n          setShapes([...shapes,{shape,attributes:defaultValues[shape],id:Date.now()}])\n        }} />    \n        </div>\n   \n    </div>\n     \n      </div>\n\n      {selectedShape!==null && \n      <CurrentShapePanel key={selectedShape} shape={shapes.find(el=>el.id===selectedShape)} changed={(shape)=>{shapes[shapes.findIndex(el=>el.id===selectedShape)]=shape;setShapes([...shapes])}}/>\n      }\n       {svgPropertiesSelected && \n      <CurrentShapePanel shape={ {shape:'svg',attributes:svgAttrs} } changed={(svg)=>{setSvgAttrs(svg.attributes)}}/>\n      }\n      \n      <div className=\"panel\">\n       <div className=\"panel-heading\">Select element to edit</div>\n       <div className=\"panel-block\">\n        <div>\n         <span onClick={()=>{setSelectedShape(null);setSvgPropertiesSelected(true)}}>\n          <SvgProperties isSelected={svgPropertiesSelected} attrs={svgAttrs} changed={attr => {\n          setSvgAttrs(attr);\n          }}/>\n         </span>\n         <ShapesList shapes={shapes} setSelectedShape={(shape)=>{setSelectedShape(shape);setSvgPropertiesSelected(false)}} selectedShape={selectedShape} setShapes={setShapes} moveShape={moveShape}/>\n        </div>\n       </div>\n      </div>\n      <div className=\"flex-column flex-grow bordered margined right-panel\">\n    \n       {/* {selectedShape?<div className=\"move-shape\" onClick={()=>{\n         const shape=shapes.find(el=>el.id===selectedShape);\n          shape.attributes.cy-=10;\n         setShapes(shapes.slice())\n       }}> */}\n      {/* </div>:null} */}\n    \n      <CodePanel shapes={shapes} svgAttrs={svgAttrs} />\n      <InputTextArea msg={setMessage} change={setShapes} />\n      <SaveLoadPanel saved={saved} setSaved={setSaved} setMessage={setMessage} setShapes={setShapes} setSvgAttrs={setSvgAttrs} shapes={shapes} svgAttrs={svgAttrs}/>\n     </div>\n    </div>\n   \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}